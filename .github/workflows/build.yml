name: Build
on: [push, pull_request]

env:
  nasm_version: '2.15.05'

  yasm_version: '1.3.0'

  win_flex_bison_version: '2.5.25'

  boost_version: '1.80.0'

  pkgconf_version: '1.9.3'

  zlib_version: '1.2.13'

  openssl_version: '3.0.5'

  gnutls_version: '3.7.7'

  libpng_version: '1.6.38'

  libjpeg_turbo_version: '2.1.4'

  pcre2_version: '10.40'

  bzip2_version: '1.0.8'

  xz_version: '5.2.7'

  brotli_version: '1.0.9'

  pixmap_version: '0.40.0'

  libxml2_version: '2.10.3'

  nghttp2_version: '1.50.0'

  sqlite3_version: '3390400'

  libogg_version: '1.3.5'

  libvorbis_version: '1.3.7'

  flac_version: '1.4.1'

  wavpack_version: '5.5.0'

  opus_version: '1.3.1'

  opusfile_version: '0.12'

  mpg123_version: '1.30.2'

  lame_version: '3.100'

  twolame_version: '0.4.0'

  taglib_version: '1.12'

  dlfcn_version: '1.3.1'

  fftw_version: '3.3.5'

  glib_version: '2.74.0'

  glib_networking_version: '2.74.0'

  libpsl_version: '0.21.1'

  libsoup_version: '3.2.1'

  orc_version: '0.4.32'

  musepack_version: '475'

  libopenmpt_version: '0.6.6'

  libgme_version: '0.6.3'

  fdk_aac_version: '2.0.2'

  libbs2b_version: '3.1.0'

  chromaprint_version: '1.5.1'

  gstreamer_version: '1.20.4'

  icu4c_version: '71.1'

  expat_version: '2.4.9'

  freetype_version: '2.12.1'

  harfbuzz_version: '5.3.0'

  protobuf_version: '21.7'

  qt_version: '6.4.0'

  max_releases: '6'

jobs:

  build-windows-msvc:
    name: Build Windows MSVC
    runs-on: windows-2019

    if: (!contains(github.event.head_commit.message, 'skip ci'))

    strategy:
      matrix:
       arch: [ x86_64, x86 ]
       buildtype: [ release, debug ]
       include:
         - description: "x86 debug"
           arch: x86
           buildtype: debug
           prefix_path_backslash: c:\strawberry_msvc_x86_debug
           prefix_path_backslash2: c:\\strawberry_msvc_x86_debug
           prefix_path_forwardslash: c:/strawberry_msvc_x86_debug
           prefix_path_unix: /c/strawberry_msvc_x86_debug
           openssl_platform: "VC-WIN32"
           msbuild_platform: "win32"
           libdir: "lib"
           bindir: "bin"
         - description: "x86 release"
           arch: x86
           buildtype: release
           prefix_path_backslash: c:\strawberry_msvc_x86_release
           prefix_path_backslash2: c:\\strawberry_msvc_x86_release
           prefix_path_forwardslash: c:/strawberry_msvc_x86_release
           prefix_path_unix: /c/strawberry_msvc_x86_release
           openssl_platform: "VC-WIN32"
           msbuild_platform: "win32"
           libdir: "lib"
           bindir: "bin"
         - description: "x86_64 debug"
           arch: x86_64
           buildtype: debug
           prefix_path_backslash: c:\strawberry_msvc_x86_64_debug
           prefix_path_backslash2: c:\\strawberry_msvc_x86_64_debug
           prefix_path_forwardslash: c:/strawberry_msvc_x86_64_debug
           prefix_path_unix: /c/strawberry_msvc_x86_64_debug
           openssl_platform: "VC-WIN64A"
           msbuild_platform: "x64"
           libdir: "lib64"
           bindir: "bin64"
         - description: "x86_64 release"
           arch: x86_64
           buildtype: release
           prefix_path_backslash: c:\strawberry_msvc_x86_64_release
           prefix_path_backslash2: c:\\strawberry_msvc_x86_64_release
           prefix_path_forwardslash: c:/strawberry_msvc_x86_64_release
           prefix_path_unix: /c/strawberry_msvc_x86_64_release
           openssl_platform: "VC-WIN64A"
           msbuild_platform: "x64"
           libdir: "lib64"
           bindir: "bin64"

    steps:

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.arch}}
          toolset: 14.29

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v1

      - name: Install python dependencies
        shell: cmd
        run: pip install meson ninja

      - name: Create sources directory
        shell: cmd
        run: mkdir sources

      - name: Create directories
        shell: bash
        run: mkdir -p ${{matrix.prefix_path_unix}}/{bin,lib,include}

      - name: Update PATH
        run: echo "${{matrix.prefix_path_backslash}}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set extra version variables
        shell: bash
        run: |
          echo "boost_version_underscore=$(echo ${{env.boost_version}} | sed 's/\./_/g')" >> $GITHUB_ENV
          echo "icu4c_version_underscore=$(echo ${{env.icu4c_version}} | sed 's/\./_/g')" >> $GITHUB_ENV
          echo "icu4c_version_dash=$(echo ${{env.icu4c_version}} | sed 's/\./\-/g')" >> $GITHUB_ENV
          echo "glib_version_short=$(echo ${{env.glib_version}} | cut -d '.' -f 1-2)" >> $GITHUB_ENV
          echo "glib_networking_version_short=$(echo ${{env.glib_networking_version}} | cut -d '.' -f 1-2)" >> $GITHUB_ENV
          echo "libsoup_version_short=$(echo ${{env.libsoup_version}} | cut -d '.' -f 1-2)" >> $GITHUB_ENV
          echo "qt_version_short=$(echo ${{env.qt_version}} | cut -d '.' -f 1-2)" >> $GITHUB_ENV

      - name: Delete conflicting files
        shell: bash
        run: |
          rm -f /c/programdata/chocolatey/bin/{addr2line.exe,ar.exe,as.exe,c++.exe,c++filt.exe,cc1.exe,cc1plus.exe,cpp.exe,g++.exe,gcc-ar.exe,gcc-nm.exe,gcc-ranlib.exe,gcc.exe,gdb.exe,gfortran.exe,ld.bfd.exe,ld.exe,ld.gold.exe,nm.exe,ranlib.exe,readelf.exe,windres.exe,x86_64-w64-mingw32-c++.exe,x86_64-w64-mingw32-g++.exe,x86_64-w64-mingw32-gcc-8.1.0.exe,x86_64-w64-mingw32-gcc-ar.exe,x86_64-w64-mingw32-gcc-nm.exe,x86_64-w64-mingw32-gcc-ranlib.exe,x86_64-w64-mingw32-gcc.exe,x86_64-w64-mingw32-gfortran.exe}
          rm -f /c/strawberry/c/bin/{addr2line.exe,ar.exe,as.exe,c++.exe,c++filt.exe,cpp.exe,g++.exe,gcc-ar.exe,gcc-nm.exe,gcc-ranlib.exe,gcc.exe,ld.exe,nm.exe,ranlib.exe,readelf.exe,widl.exe,windmc.exe,windres.exe,x86_64-w64-mingw32-c++.exe,x86_64-w64-mingw32-g++.exe,x86_64-w64-mingw32-gcc-8.3.0.exe,x86_64-w64-mingw32-gcc-ar.exe,x86_64-w64-mingw32-gcc-nm.exe,x86_64-w64-mingw32-gcc-ranlib.exe,x86_64-w64-mingw32-gcc.exe,x86_64-w64-mingw32-gfortran.exe}

      - name: Delete conflicting icu
        shell: bash
        run: |
          find "/c/program files (x86)/windows kits/" -name 'icu*.lib' -delete
          find "/c/program files (x86)/windows kits/" -name 'icu*.h' -delete


      - name: Download nasm (x86)
        if: matrix.arch == 'x86'
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "nasm [this](https://www.nasm.us/pub/nasm/releasebuilds/${{env.nasm_version}}/win32/nasm-${{env.nasm_version}}-installer-x86.exe)!"
          target: downloads/
          auto-match: true

      - name: Download nasm (x86_64)
        if: matrix.arch == 'x86_64'
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "nasm [this](https://www.nasm.us/pub/nasm/releasebuilds/${{env.nasm_version}}/win64/nasm-${{env.nasm_version}}-installer-x64.exe)!"
          target: downloads/
          auto-match: true

      - name: Install nasm (x86)
        if: matrix.arch == 'x86'
        shell: pwsh
        working-directory: downloads
        run: |
          mkdir c:\nasm
          cd c:\nasm
          7z x ${{github.workspace}}\downloads\nasm-${{env.nasm_version}}-installer-x86.exe

      - name: Install nasm (x86_64)
        if: matrix.arch == 'x86_64'
        shell: pwsh
        working-directory: downloads
        run: |
          mkdir c:\nasm
          cd c:\nasm
          7z x ${{github.workspace}}\downloads\nasm-${{env.nasm_version}}-installer-x64.exe

      - name: Copy nasm
        shell: bash
        run: cp /c/nasm/nasm.exe /c/nasm/nasmw.exe

      - name: Add nasm to PATH
        run: echo "c:\nasm" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append


      - name: Download yasm
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "yasm [this](http://www.tortall.net/projects/yasm/releases/yasm-${{env.yasm_version}}-win64.exe)!"
          target: downloads/
          auto-match: true

      - name: Copy yasm
        shell: bash
        working-directory: downloads
        run: cp yasm-${{env.yasm_version}}-win64.exe ${{matrix.prefix_path_unix}}/bin/yasm.exe


      - name: Download win_flex_bison
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "win_flex_bison [this](https://github.com/lexxmark/winflexbison/releases/download/v${{env.win_flex_bison_version}}/win_flex_bison-${{env.win_flex_bison_version}}.zip)!"
          target: downloads/
          auto-match: true

      - name: Copy win_flex_bison
        shell: pwsh
        run: |
          mkdir c:\win_flex_bison
          cd c:\win_flex_bison
          7z x ${{github.workspace}}\downloads\win_flex_bison-${{env.win_flex_bison_version}}.zip

      - name: Add win_flex_bison to PATH
        run: echo "c:\win_flex_bison" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append


      - name: Download Boost
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "Boost [this](https://boostorg.jfrog.io/artifactory/main/release/${{env.boost_version}}/source/boost_${{env.boost_version_underscore}}.tar.bz2)!"
          target: downloads/
          auto-match: true

      - name: Extract Boost
        shell: bash
        working-directory: sources
        run: tar -xf  ../downloads/boost_${{env.boost_version_underscore}}.tar.bz2

      - name: Copy Boost
        shell: bash
        working-directory: sources
        run: cp -r boost_${{env.boost_version_underscore}}/boost ${{matrix.prefix_path_unix}}/include/


      - name: Download pkgconf
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "pkgconf [this](https://github.com/pkgconf/pkgconf/archive/refs/tags/pkgconf-${{env.pkgconf_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract pkgconf
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/pkgconf-${{env.pkgconf_version}}.tar.gz

      - name: Compile pkgconf
        shell: cmd
        env:
          CL: "/MP"
        working-directory: sources/pkgconf-pkgconf-${{env.pkgconf_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --wrap-mode=nodownload -Dtests=false build
          cd build
          ninja
          ninja install
          copy ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe ${{matrix.prefix_path_backslash}}\bin\pkg-config.exe


      - name: Download zlib
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "zlib [this](https://zlib.net/zlib-${{env.zlib_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract zlib
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/zlib-${{env.zlib_version}}.tar.gz

      - name: Compile zlib
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/zlib-${{env.zlib_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}"
          cmake --build .
          cmake --install .

      - name: copy zlib (release)
        if: matrix.buildtype == 'release'
        shell: bash
        run: cp ${{matrix.prefix_path_unix}}/lib/zlib.lib ${{matrix.prefix_path_unix}}/lib/z.lib

      - name: copy zlib (debug)
        if: matrix.buildtype == 'debug'
        shell: bash
        run: |
          cp ${{matrix.prefix_path_unix}}/lib/zlibd.lib ${{matrix.prefix_path_unix}}/lib/z.lib
          cp ${{matrix.prefix_path_unix}}/lib/zlibd.lib ${{matrix.prefix_path_unix}}/lib/zd.lib


      - name: Download openssl
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "openssl [this](https://www.openssl.org/source/openssl-${{env.openssl_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract openssl
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/openssl-${{env.openssl_version}}.tar.gz

      - name: Configure openssl (release)
        if: matrix.buildtype == 'release'
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/openssl-${{env.openssl_version}}
        run: perl Configure ${{matrix.openssl_platform}} shared zlib no-capieng no-tests --prefix=${{matrix.prefix_path_backslash}} --libdir=lib --openssldir=${{matrix.prefix_path_backslash}}\ssl --release --with-zlib-include=${{matrix.prefix_path_backslash}}\include --with-zlib-lib=${{matrix.prefix_path_backslash}}\lib\zlib.lib

      - name: Configure openssl (debug)
        if: matrix.buildtype == 'debug'
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/openssl-${{env.openssl_version}}
        run: perl Configure ${{matrix.openssl_platform}} shared zlib no-capieng no-tests --prefix=${{matrix.prefix_path_backslash}} --libdir=lib --openssldir=${{matrix.prefix_path_backslash}}\ssl --debug --with-zlib-include=${{matrix.prefix_path_backslash}}\include --with-zlib-lib=${{matrix.prefix_path_backslash}}\lib\zlibd.lib

      - name: Compile openssl
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/openssl-${{env.openssl_version}}
        run: |
          nmake
          nmake install_sw


      - name: Download GnuTLS
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "GnutTLS [this](https://github.com/ShiftMediaProject/gnutls/releases/download/${{env.gnutls_version}}/libgnutls_${{env.gnutls_version}}_msvc16.zip)!"
          target: downloads/
          auto-match: true

      - name: Extract GnuTLS
        shell: pwsh
        run: |
          mkdir gnutls
          cd gnutls
          7z x "../downloads/libgnutls_${{env.gnutls_version}}_msvc16.zip"
          xcopy /s /y include\* ${{matrix.prefix_path_backslash}}\include\

      - name: Copy GnuTLS (x86)
        if: matrix.arch == 'x86'
        shell: cmd
        run: |
          cd gnutls
          xcopy /s /y bin\x86\*.* ${{matrix.prefix_path_backslash}}\bin\
          xcopy /s /y lib\x86\*.* ${{matrix.prefix_path_backslash}}\lib\

      - name: Copy GnuTLS (x86_64)
        if: matrix.arch == 'x86_64'
        shell: cmd
        run: |
          cd gnutls
          xcopy /s /y bin\x64\*.* ${{matrix.prefix_path_backslash}}\bin\
          xcopy /s /y lib\x64\*.* ${{matrix.prefix_path_backslash}}\lib\

      - name: Create gnutls.pc
        shell: bash
        run: |
          echo "prefix=${{matrix.prefix_path_forwardslash}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/gnutls.pc
          echo "exec_prefix=${{matrix.prefix_path_forwardslash}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/gnutls.pc
          echo "libdir=${{matrix.prefix_path_forwardslash}}/lib" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/gnutls.pc
          echo "includedir=${{matrix.prefix_path_forwardslash}}/include" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/gnutls.pc
          echo "" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/gnutls.pc
          echo "Name: gnutls" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/gnutls.pc
          echo "Description: gnutls" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/gnutls.pc
          echo "URL: https://www.gnutls.org/" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/gnutls.pc
          echo "Version: ${{env.gnutls_version}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/gnutls.pc
          echo "Libs: -L${{matrix.prefix_path_forwardslash}}/lib -lgnutls" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/gnutls.pc
          echo "Cflags: -I${{matrix.prefix_path_forwardslash}}/include" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/gnutls.pc


      - name: Download libpng
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "libpng [this](https://downloads.sourceforge.net/project/libpng/libpng16/${{env.libpng_version}}/libpng-${{env.libpng_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract libpng
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/libpng-${{env.libpng_version}}.tar.xz

      - name: Patch libpng
        shell: bash
        working-directory: sources/libpng-${{env.libpng_version}}
        run: patch -p1 < ../../patches/libpng-pkgconf.patch

      - name: Compile libpng
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/libpng-${{env.libpng_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}"
          cmake --build .
          cmake --install .


      - name: Download libjpeg-turbo
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "libjpeg-turbo [this](https://sourceforge.net/projects/libjpeg-turbo/files/${{env.libjpeg_turbo_version}}/libjpeg-turbo-${{env.libjpeg_turbo_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract libjpeg-turbo
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/libjpeg-turbo-${{env.libjpeg_turbo_version}}.tar.gz

      - name: Configure libjpeg-turbo
        shell: cmd
        env:
          CL: "/MP"
        run: cmake --log-level="DEBUG" -S sources/libjpeg-turbo-${{env.libjpeg_turbo_version}} -B sources/libjpeg-turbo-${{env.libjpeg_turbo_version}}/build -G Ninja -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON -DENABLE_SHARED=ON

      - name: Build libjpeg-turbo
        shell: cmd
        working-directory: sources/libjpeg-turbo-${{env.libjpeg_turbo_version}}/build
        run: cmake --build .

      - name: Install libjpeg-turbo
        shell: cmd
        working-directory: sources/libjpeg-turbo-${{env.libjpeg_turbo_version}}/build
        run: cmake --install .


      - name: Download pcre2
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "pcre2 [this](https://github.com/PhilipHazel/pcre2/releases/download/pcre2-${{env.pcre2_version}}/pcre2-${{env.pcre2_version}}.tar.bz2)!"
          target: downloads/
          auto-match: true

      - name: Extract pcre2
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/pcre2-${{env.pcre2_version}}.tar.bz2

      - name: Compile pcre2
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/pcre2-${{env.pcre2_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DPCRE2_SUPPORT_UNICODE=ON -DPCRE2_BUILD_PCRE2_8=ON -DPCRE2_BUILD_PCRE2_16=ON -DPCRE2_BUILD_PCRE2_32=ON -DPCRE2_SUPPORT_UNICODE=ON -DPCRE2_BUILD_TESTS=OFF
          cmake --build .
          cmake --install .

      - name: copy pcre2 lib (debug)
        if: matrix.buildtype == 'debug'
        shell: cmd
        run: copy "${{matrix.prefix_path_backslash}}\lib\pcre2-8d.lib" "${{matrix.prefix_path_backslash}}\lib\pcre2-8.lib"


      - name: Download bzip2
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "bzip2 [this](https://sourceware.org/pub/bzip2/bzip2-${{env.bzip2_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract bzip2
        shell: bash
        working-directory: sources
        run: |
          tar -xf ../downloads/bzip2-${{env.bzip2_version}}.tar.gz
          cd bzip2-${{env.bzip2_version}}
          patch -p1 < ../../patches/bzip2-cmake.patch

      - name: Compile bzip2
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/bzip2-${{env.bzip2_version}}
        run: |
          mkdir build2
          cd build2
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}"
          cmake --build .
          cmake --install .


      - name: Download xz
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "xz [this](https://tukaani.org/xz/xz-${{env.xz_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract xz
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/xz-${{env.xz_version}}.tar.xz

      - name: Patch xz
        shell: bash
        working-directory: sources/xz-${{env.xz_version}}
        run: patch -p1 < ../../patches/xz-config.patch

      - name: Compile xz
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/xz-${{env.xz_version}}/windows/vs2019
        run: msbuild xz_win.sln /property:Configuration=${{matrix.buildtype}} /p:platform=${{matrix.msbuild_platform}}

      - name: Install xz
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/xz-${{env.xz_version}}/windows/vs2019
        run: |
          copy ${{matrix.buildtype}}\${{matrix.msbuild_platform}}\liblzma_dll\*.lib ${{matrix.prefix_path_backslash}}\lib\
          copy ${{matrix.buildtype}}\${{matrix.msbuild_platform}}\liblzma_dll\*.dll ${{matrix.prefix_path_backslash}}\bin\
          copy ..\..\src\liblzma\api\*.h ${{matrix.prefix_path_backslash}}\include\
          mkdir ${{matrix.prefix_path_backslash}}\include\lzma
          copy ..\..\src\liblzma\api\lzma\*.* ${{matrix.prefix_path_backslash}}\include\lzma\


      - name: Download brotli
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "brotli [this](https://github.com/google/brotli/archive/refs/tags/v${{env.brotli_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract brotli
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/v${{env.brotli_version}}.tar.gz

      - name: Compile brotli
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/brotli-${{env.brotli_version}}
        run: |
          mkdir build2
          cd build2
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_TESTING=OFF
          cmake --build .
          cmake --install .


      - name: Compile libiconv
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources
        run: |
          git clone https://github.com/pffang/libiconv-for-Windows
          cd libiconv-for-Windows
          git checkout 9b7aba8da6e125ef33912fa4412779279f204003
          msbuild libiconv.sln /property:Configuration=${{matrix.buildtype}}

      - name: Install libiconv
        shell: cmd
        working-directory: sources/libiconv-for-Windows
        run: |
          copy include\*.h ${{matrix.prefix_path_backslash}}\include\
          copy ${{matrix.libdir}}\*.lib ${{matrix.prefix_path_backslash}}\lib\
          copy ${{matrix.libdir}}\*.dll ${{matrix.prefix_path_backslash}}\bin\


      - name: Download pixman
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "pixman [this](https://www.cairographics.org/releases/pixman-${{env.pixmap_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract pixman
        shell: bash
        working-directory: sources
        run: |
          tar -xf ../downloads/pixman-${{env.pixmap_version}}.tar.gz
          cd pixman-${{env.pixmap_version}}
          patch -p1 < ../../patches/pixman.patch

      - name: Compile pixman
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/pixman-${{env.pixmap_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload -Dgtk=disabled -Dlibpng=enabled build
          cd build
          ninja
          ninja install


      - name: Download libxml2
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "libxml2 [this](https://gitlab.gnome.org/GNOME/libxml2/-/archive/v${{env.libxml2_version}}/libxml2-v${{env.libxml2_version}}.tar.bz2)!"
          target: downloads/
          auto-match: true

      - name: Extract libxml2
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/libxml2-v${{env.libxml2_version}}.tar.bz2 || true

      - name: Compile libxml2
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/libxml2-v${{env.libxml2_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON -DLIBXML2_WITH_PYTHON=OFF -DLIBXML2_WITH_ZLIB=ON
          cmake --build .
          cmake --install .

      - name: copy libxml2 (debug)
        if: matrix.buildtype == 'debug'
        shell: bash
        run: cp ${{matrix.prefix_path_unix}}/lib/libxml2d.lib ${{matrix.prefix_path_unix}}/lib/libxml2.lib


      - name: Download nghttp2
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "nghttp2 [this](https://github.com/nghttp2/nghttp2/releases/download/v${{env.nghttp2_version}}/nghttp2-${{env.nghttp2_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract nghttp2
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/nghttp2-${{env.nghttp2_version}}.tar.xz

      - name: Compile nghttp2
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/nghttp2-${{env.nghttp2_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DENABLE_SHARED_LIB=ON
          cmake --build .
          cmake --install .


      - name: Download SQLite
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "SQLite [this](https://sqlite.org/2022/sqlite-autoconf-${{env.sqlite3_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract SQLite
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/sqlite-autoconf-${{env.sqlite3_version}}.tar.gz

      - name: Compile SQlite
        shell: cmd
        env:
          CL: "/MP"
        working-directory: sources/sqlite-autoconf-${{env.sqlite3_version}}
        run: |
          cl -DSQLITE_API="__declspec(dllexport)" -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_COLUMN_METADATA sqlite3.c -link -dll -out:sqlite3.dll
          cl shell.c sqlite3.c -Fe:sqlite3.exe

      - name: Copy SQLite
        shell: cmd
        working-directory: sources/sqlite-autoconf-${{env.sqlite3_version}}
        run: |
          copy *.h ${{matrix.prefix_path_backslash}}\include\
          copy *.lib ${{matrix.prefix_path_backslash}}\lib\
          copy *.dll ${{matrix.prefix_path_backslash}}\bin\
          copy *.exe ${{matrix.prefix_path_backslash}}\bin\

      - name: Create sqlite3.pc
        shell: bash
        run: |
          echo "prefix=${{matrix.prefix_path_forwardslash}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "exec_prefix=${{matrix.prefix_path_forwardslash}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "libdir=${{matrix.prefix_path_forwardslash}}/lib" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "includedir=${{matrix.prefix_path_forwardslash}}/include" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "Name: SQLite" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "Description: SQL database engine" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "URL: https://www.sqlite.org/" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "Version: 3.38.1" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "Libs: -L${{matrix.prefix_path_forwardslash}}/lib -lsqlite3" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "Libs.private: -lz -ldl" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc
          echo "Cflags: -I${{matrix.prefix_path_forwardslash}}/include" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/sqlite3.pc


      - name: Download libogg
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "libogg [this](https://downloads.xiph.org/releases/ogg/libogg-${{env.libogg_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract libogg
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/libogg-${{env.libogg_version}}.tar.xz

      - name: Compile libogg
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/libogg-${{env.libogg_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON -DINSTALL_DOCS=OFF
          cmake --build .
          cmake --install .


      - name: Download libvorbis
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "libvorbis [this](https://downloads.xiph.org/releases/vorbis/libvorbis-${{env.libvorbis_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract libvorbis
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/libvorbis-${{env.libvorbis_version}}.tar.xz

      - name: Compile libvorbis
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/libvorbis-${{env.libvorbis_version}}
        run: |
          mkdir build2
          cd build2
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON
          cmake --build .
          cmake --install .


      - name: Download flac
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "flac [this](https://ftp.osuosl.org/pub/xiph/releases/flac/flac-${{env.flac_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract flac
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/flac-${{env.flac_version}}.tar.xz

      - name: Patch flac
        shell: bash
        working-directory: sources/flac-${{env.flac_version}}
        run: patch -p1 < ../../patches/flac-seek.patch

      - name: Move nasm.exe
        shell: bash
        run: mv /c/nasm/nasm.exe /c/nasm/nasm.exe_

      - name: Compile flac
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/flac-${{env.flac_version}}
        run: |
          mkdir build2
          cd build2
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DINSTALL_MANPAGES=OFF -DBUILD_TESTING=OFF -DBUILD_PROGRAMS=OFF
          cmake --build .
          cmake --install .

      - name: Move nasm.exe
        shell: bash
        run: mv /c/nasm/nasm.exe_ /c/nasm/nasm.exe

      - name: Download wavpack
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "wavpack [this](https://www.wavpack.com/wavpack-${{env.wavpack_version}}.tar.bz2)!"
          target: downloads/
          auto-match: true

      - name: Extract wavpack
        shell: bash
        working-directory: sources
        run: |
          tar -xf ../downloads/wavpack-${{env.wavpack_version}}.tar.bz2
          sed -i '/wavpackdll.rc/d' wavpack-${{env.wavpack_version}}/CMakeLists.txt

      - name: Compile wavpack
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/wavpack-${{env.wavpack_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF -DWAVPACK_BUILD_DOCS=OFF -DWAVPACK_BUILD_PROGRAMS=OFF -DWAVPACK_ENABLE_ASM=OFF -DWAVPACK_ENABLE_LEGACY=OFF -DWAVPACK_BUILD_WINAMP_PLUGIN=OFF -DWAVPACK_BUILD_COOLEDIT_PLUGIN=OFF
          cmake --build .
          cmake --install .
          mkdir ${{matrix.prefix_path_backslash}}\include\wavpack
          copy ${{matrix.prefix_path_backslash}}\include\wavpack.h ${{matrix.prefix_path_backslash}}\include\wavpack\
          copy ${{matrix.prefix_path_backslash}}\lib\wavpackdll.lib ${{matrix.prefix_path_backslash}}\lib\wavpack.lib
          copy ${{matrix.prefix_path_backslash}}\bin\wavpackdll.dll ${{matrix.prefix_path_backslash}}\bin\wavpack.dll


      - name: Download opus
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "opus [this](https://archive.mozilla.org/pub/opus/opus-${{env.opus_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract opus
        shell: bash
        working-directory: sources
        run: |
          tar -xf ../downloads/opus-${{env.opus_version}}.tar.gz
          sed -i '/include(opus_buildtype.cmake)/d' opus-${{env.opus_version}}/CMakeLists.txt

      - name: Compile opus
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/opus-${{env.opus_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON
          cmake --build .
          cmake --install .


      - name: Download opusfile
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "opusfile [this](https://ftp.osuosl.org/pub/xiph/releases/opus/opusfile-${{env.opusfile_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract opusfile
        shell: bash
        working-directory: sources
        run: |
          tar -xf ../downloads/opusfile-${{env.opusfile_version}}.tar.gz
          cd opusfile-${{env.opusfile_version}}
          patch -p1 < ../../patches/opusfile-cmake.patch

      - name: Compile opusfile
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/opusfile-${{env.opusfile_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON
          cmake --build .
          cmake --install .


      - name: Download speex
        shell: bash
        working-directory: sources
        run: |
          git clone https://github.com/xiph/speex
          cd speex
          patch -p1 < ../../patches/speex-cmake.patch

      - name: Compile speex
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/speex
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON
          cmake --build .
          cmake --install .

      - name: Copy speex
        if: matrix.buildtype == 'debug'
        shell: cmd
        run: |
          copy ${{matrix.prefix_path_backslash}}\lib\libspeexd.lib ${{matrix.prefix_path_backslash}}\lib\libspeex.lib
          copy ${{matrix.prefix_path_backslash}}\bin\libspeexd.dll ${{matrix.prefix_path_backslash}}\bin\libspeex.dll


      - name: Download mpg123
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "mpg123 [this](https://downloads.sourceforge.net/project/mpg123/mpg123/${{env.mpg123_version}}/mpg123-${{env.mpg123_version}}.tar.bz2)!"
          target: downloads/
          auto-match: true

      - name: Extract mpg123
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/mpg123-${{env.mpg123_version}}.tar.bz2

      - name: Compile mpg123
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/mpg123-${{env.mpg123_version}}
        run: |
          mkdir build2
          cd build2
          cmake ../ports/cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON -DBUILD_PROGRAMS=OFF -DBUILD_LIBOUT123=OFF
          cmake --build .
          cmake --install .


      - name: Download lame
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "lame [this](https://downloads.sourceforge.net/project/lame/lame/${{env.lame_version}}/lame-${{env.lame_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract lame
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/lame-${{env.lame_version}}.tar.gz

      - name: Patch lame (x86)
        if: matrix.arch == 'x86'
        shell: bash
        working-directory: sources
        run: sed -i 's/MACHINE = \/machine:.*/MACHINE = \/machine:X86/g' lame-${{env.lame_version}}/Makefile.MSVC

      - name: Patch lame (x86_64)
        if: matrix.arch == 'x86_64'
        shell: bash
        working-directory: sources
        run: sed -i 's/MACHINE = \/machine:.*/MACHINE = \/machine:X64/g' lame-${{env.lame_version}}/Makefile.MSVC

      - name: Compile lame (x86)
        if: matrix.arch == 'x86'
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/lame-${{env.lame_version}}
        run: nmake -f Makefile.MSVC MSVCVER=X86 libmp3lame.dll

      - name: Compile lame (x86_64)
        if: matrix.arch == 'x86_64'
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/lame-${{env.lame_version}}
        run: nmake -f Makefile.MSVC MSVCVER=Win64 libmp3lame.dll

      - name: Install lame
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/lame-${{env.lame_version}}
        run: |
          copy include\*.h ${{matrix.prefix_path_backslash}}\include\
          copy output\libmp3lame*.lib ${{matrix.prefix_path_backslash}}\lib\
          copy output\libmp3lame*.dll ${{matrix.prefix_path_backslash}}\bin\

      - name: Create mp3lame.pc
        shell: bash
        run: |
          echo "prefix=${{matrix.prefix_path_forwardslash}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/mp3lame.pc
          echo "exec_prefix=${{matrix.prefix_path_forwardslash}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/mp3lame.pc
          echo "libdir=${{matrix.prefix_path_forwardslash}}/lib" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/mp3lame.pc
          echo "includedir=${{matrix.prefix_path_forwardslash}}/include" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/mp3lame.pc
          echo "" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/mp3lame.pc
          echo "Name: lame" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/mp3lame.pc
          echo "Description: encoder that converts audio to the MP3 file format." >>${{matrix.prefix_path_unix}}/lib/pkgconfig/mp3lame.pc
          echo "URL: https://lame.sourceforge.io/" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/mp3lame.pc
          echo "Version: ${{env.lame_version}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/mp3lame.pc
          echo "Libs: -L${{matrix.prefix_path_forwardslash}}/lib -lmp3lame" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/mp3lame.pc
          echo "Cflags: -I${{matrix.prefix_path_forwardslash}}/include" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/mp3lame.pc


      - name: Download twolame
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "twolame [this](https://downloads.sourceforge.net/twolame/twolame-${{env.twolame_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract twolame
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/twolame-${{env.twolame_version}}.tar.gz

      - name: Patch twolame source
        shell: bash
        working-directory: sources/twolame-${{env.twolame_version}}
        run: patch -p1 < ../../patches/twolame.patch

      - name: Upgrade twolame project
        shell: cmd
        env:
          CL: "/MP"
        working-directory: sources/twolame-${{env.twolame_version}}/win32
        run: start /w devenv.exe libtwolame_dll.sln /upgrade

      - name: Patch twolame project for x86_64
        if: matrix.arch == 'x86_64'
        shell: bash
        working-directory: sources/twolame-${{env.twolame_version}}/win32
        run: |
          sed -i 's/Win32/x64/g' *.sln *.vcproj *.vcxproj
          sed -i 's/MachineX86/MachineX64/g' *.sln *.vcxproj

      - name: Compile twolame
        shell: cmd
        env:
          CL: "/MP"
        working-directory: sources/twolame-${{env.twolame_version}}/win32
        run: |
          msbuild libtwolame_dll.sln /property:Configuration=${{matrix.buildtype}} /p:platform=${{matrix.msbuild_platform}}
          copy ..\libtwolame\twolame.h ${{matrix.prefix_path_backslash}}\include\
          copy lib\*.lib ${{matrix.prefix_path_backslash}}\lib\
          copy lib\*.dll ${{matrix.prefix_path_backslash}}\bin\

      - name: Create twolame.pc
        shell: bash
        run: |
          echo "prefix=${{matrix.prefix_path_forwardslash}}" >${{matrix.prefix_path_unix}}/lib/pkgconfig/twolame.pc
          echo "exec_prefix=${{matrix.prefix_path_forwardslash}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/twolame.pc
          echo "libdir=${{matrix.prefix_path_forwardslash}}/lib" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/twolame.pc
          echo "includedir=${{matrix.prefix_path_forwardslash}}/include" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/twolame.pc
          echo "" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/twolame.pc
          echo "Name: lame" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/twolame.pc
          echo "Description: optimised MPEG Audio Layer 2 (MP2) encoder based on tooLAME" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/twolame.pc
          echo "URL: https://www.twolame.org/" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/twolame.pc
          echo "Version: ${{env.twolame_version}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/twolame.pc
          echo "Libs: -L${{matrix.prefix_path_forwardslash}}/lib -ltwolame_dll" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/twolame.pc
          echo "Cflags: -I${{matrix.prefix_path_forwardslash}}/include" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/twolame.pc


      - name: Download TagLib
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "TagLib [this](https://taglib.org/releases/taglib-${{env.taglib_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract TagLib
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/taglib-${{env.taglib_version}}.tar.gz

      - name: Compile TagLib
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/taglib-${{env.taglib_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON
          cmake --build .
          cmake --install .


      - name: Download dlfcn-win32
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "dlfcn-win32 [this](https://github.com/dlfcn-win32/dlfcn-win32/archive/refs/tags/v${{env.dlfcn_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract dlfcn-win32
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/v${{env.dlfcn_version}}.tar.gz

      - name: Compile dlfcn-win32
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/dlfcn-win32-${{env.dlfcn_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}"
          cmake --build .
          cmake --install .


      - name: Download FFTW (x86)
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "FFTW [this](https://fftw.org/pub/fftw/fftw-${{env.fftw_version}}-dll32.zip)!"
          target: downloads/
          auto-match: true

      - name: Download FFTW (x86_64)
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "FFTW [this](https://fftw.org/pub/fftw/fftw-${{env.fftw_version}}-dll64.zip)!"
          target: downloads/
          auto-match: true

      #- name: Extract FFTW
        #shell: bash
        #working-directory: sources
        #run: |
          #tar -xf ../downloads/fftw-3.3.10.tar.gz
          #cd fftw-3.3.10
          #patch -p1 < ../../patches/fftw-fixes.patch

      #- name: Compile FFTW
        #env:
          #CL: "/MP"
          #PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          #PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        #working-directory: sources/fftw-3.3.10
        #run: |
          #mkdir build
          #cd build
          #cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX=${{matrix.prefix_path_backslash}} -DBUILD_SHARED_LIBS=ON -DBUILD_TESTS=OFF -DENABLE_AVX=ON -DENABLE_AVX2=OFF -DENABLE_SSE=ON -DENABLE_SSE2=ON -DENABLE_THREADS=ON -DWITH_COMBINED_THREADS=ON
          #cmake --build .
          #cmake --install .

      # Using the prebuilt FFTW binaries is recommended, they are also faster.

      - name: Extract FFTW (x86)
        if: matrix.arch == 'x86'
        shell: pwsh
        working-directory: downloads
        run: |
          mkdir fftw
          cd fftw
          7z x "${{github.workspace}}/downloads/fftw-${{env.fftw_version}}-dll32.zip"

      - name: Extract FFTW (x86_64)
        if: matrix.arch == 'x86_64'
        shell: pwsh
        working-directory: downloads
        run: |
          mkdir fftw
          cd fftw
          7z x "${{github.workspace}}/downloads/fftw-${{env.fftw_version}}-dll64.zip"

      - name: Install FFTW
        working-directory: downloads/fftw
        run: |          
          lib /def:libfftw3-3.def
          xcopy /s /y libfftw3-3.dll ${{matrix.prefix_path_backslash}}\bin\
          xcopy /s /y libfftw3-3.lib ${{matrix.prefix_path_backslash}}\lib\
          xcopy /s /y fftw3.h ${{matrix.prefix_path_backslash}}\include\


      - name: Download libffi
        shell: bash
        working-directory: sources
        run: git clone https://gitlab.freedesktop.org/gstreamer/meson-ports/libffi

      - name: Compile libffi
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path_forwardslash}}/include
          LDFLAGS: -L${{matrix.prefix_path_forwardslash}}/lib
        working-directory: sources/libffi
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload build
          cd build
          ninja
          ninja install


      - name: Download GLib
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "GLib [this](https://download.gnome.org/sources/glib/${{env.glib_version_short}}/glib-${{env.glib_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract GLib
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/glib-${{env.glib_version}}.tar.xz || true

      - name: Compile GLib
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path_backslash}}\include
          CXXFLAGS: -I${{matrix.prefix_path_backslash}}\include
          LDFLAGS: -L${{matrix.prefix_path_backslash}}\lib

        working-directory: sources/glib-${{env.glib_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig build
          cd build
          ninja
          ninja install


      - name: Download glib-networking
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "glib-networking [this](https://download.gnome.org/sources/glib-networking/${{env.glib_networking_version_short}}/glib-networking-${{env.glib_networking_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract glib-networking
        shell: bash
        working-directory: sources
        run: |
          tar -xf ../downloads/glib-networking-${{env.glib_networking_version}}.tar.xz
          cd glib-networking-${{env.glib_networking_version}}
          patch -p1 < ../../patches/glib-networking-tests.patch

      - name: Compile glib-networking
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/glib-networking-${{env.glib_networking_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload -Dgnutls=enabled -Dopenssl=enabled build
          cd build
          ninja
          ninja install


      - name: Download libpsl
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "libpsl [this](https://github.com/rockdaboot/libpsl/releases/download/${{env.libpsl_version}}/libpsl-${{env.libpsl_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract libpsl
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/libpsl-${{env.libpsl_version}}.tar.gz

      - name: Compile libpsl
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/libpsl-${{env.libpsl_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload build
          cd build
          ninja
          ninja install


      - name: Download libsoup
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "libsoup [this](https://download.gnome.org/sources/libsoup/${{env.libsoup_version_short}}/libsoup-${{env.libsoup_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract libsoup
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/libsoup-${{env.libsoup_version}}.tar.xz

      - name: Compile libsoup
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/libsoup-${{env.libsoup_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload -Dtests=false -Dvapi=disabled -Dgssapi=disabled -Dintrospection=disabled -Dsysprof=disabled -Dtls_check=false build
          cd build
          ninja
          ninja install


      - name: Download orc
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "orc [this](https://gstreamer.freedesktop.org/src/orc/orc-${{env.orc_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract orc
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/orc-${{env.orc_version}}.tar.xz

      - name: Compile orc
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/orc-${{env.orc_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload build
          cd build
          ninja
          ninja install


      - name: Download musepack
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "musepack [this](https://files.musepack.net/source/musepack_src_r${{env.musepack_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract musepack
        shell: bash
        working-directory: sources
        run: |
          tar -xf ../downloads/musepack_src_r${{env.musepack_version}}.tar.gz
          cd musepack_src_r${{env.musepack_version}}
          patch -p1 < ../../patches/musepack-fixes.patch

      - name: Compile musepack
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/musepack_src_r${{env.musepack_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX=${{matrix.prefix_path_backslash}} -DBUILD_SHARED_LIBS=ON -DSHARED=ON
          cmake --build .
          cmake --install .
          copy libmpcdec\*.lib ${{matrix.prefix_path_backslash}}\lib\
          copy libmpcdec\*.dll ${{matrix.prefix_path_backslash}}\bin\


      - name: Download libopenmpt
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "libopenmpt [this](https://lib.openmpt.org/files/libopenmpt/src/libopenmpt-${{env.libopenmpt_version}}+release.msvc.zip)!"
          target: downloads/
          auto-match: true

      - name: Extract libopenmpt
        shell: pwsh
        working-directory: sources
        run: |
          mkdir libopenmpt
          cd libopenmpt
          7z x ..\..\downloads\libopenmpt-${{env.libopenmpt_version}}+release.msvc.zip

      - name: Patch libopenmpt
        shell: bash
        working-directory: sources/libopenmpt
        run: patch -p1 < ../../patches/libopenmpt-cmake.patch

      - name: Compile libopenmpt
        shell: cmd
        env:
          CL: "/MP"
        working-directory: sources/libopenmpt
        run: |
          mkdir build2
          cd build2
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX=${{matrix.prefix_path_backslash}} -DBUILD_SHARED_LIBS=ON
          cmake --build .
          cmake --install .


      - name: Download libgme
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "libgme [this](https://bitbucket.org/mpyne/game-music-emu/downloads/game-music-emu-${{env.libgme_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract libgme
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/game-music-emu-${{env.libgme_version}}.tar.xz

      - name: Compile libgme
        shell: cmd
        env:
          CL: "/MP"
        working-directory: sources/game-music-emu-${{env.libgme_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}"
          cmake --build .
          cmake --install .


      - name: Download fdk-aac
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "fdk-aac [this](https://downloads.sourceforge.net/project/opencore-amr/fdk-aac/fdk-aac-${{env.fdk_aac_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract fdk-aac
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/fdk-aac-${{env.fdk_aac_version}}.tar.gz

      - name: Compile fdk-aac
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/fdk-aac-${{env.fdk_aac_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX=${{matrix.prefix_path_backslash}} -DBUILD_SHARED_LIBS=ON -DBUILD_PROGRAMS=OFF
          cmake --build .
          cmake --install .


      - name: Download faad2
        shell: bash
        working-directory: sources
        run: |
          git clone https://github.com/knik0/faad2
          cd faad2
          patch -p1 < ../../patches/faad2-cmake.patch

      - name: Compile faad2
        shell: cmd
        env:
          CL: "/MP"
        working-directory: sources/faad2
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX=${{matrix.prefix_path_backslash}} -DBUILD_SHARED_LIBS=ON
          cmake --build .
          cmake --install .
          copy ..\include\*.h ${{matrix.prefix_path_backslash}}\include\


      - name: Download faac
        shell: bash
        working-directory: sources
        run: |
          git clone https://github.com/knik0/faac
          cd faac
          patch -p1 < ../../patches/faac-msvc.patch

      - name: Compile faac
        shell: cmd
        env:
          CL: "/MP"
        working-directory: sources/faac/project/msvc
        run: |
          msbuild faac.sln /property:Configuration=${{matrix.buildtype}} /p:platform=${{matrix.msbuild_platform}}
          copy ..\..\include\*.h ${{matrix.prefix_path_backslash}}\include\

      - name: copy faac (release)
        if: matrix.buildtype == 'release'
        shell: cmd
        working-directory: sources/faac/project/msvc
        run: |
          copy bin\Release\libfaac_dll.lib ${{matrix.prefix_path_backslash}}\lib\libfaac.lib
          copy bin\Release\*.dll ${{matrix.prefix_path_backslash}}\bin\

      - name: copy faac (debug)
        if: matrix.buildtype == 'debug'
        shell: cmd
        working-directory: sources/faac/project/msvc
        run: |
          copy bin\Debug\libfaac_dll.lib ${{matrix.prefix_path_backslash}}\lib\libfaac.lib
          copy bin\Debug\*.dll ${{matrix.prefix_path_backslash}}\bin\


      - name: Download libbs2b
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "libbs2b [this](https://downloads.sourceforge.net/project/bs2b/libbs2b/${{env.libbs2b_version}}/libbs2b-${{env.libbs2b_version}}.tar.bz2)!"
          target: downloads/
          auto-match: true

      - name: Extract libbs2b
        shell: bash
        working-directory: sources
        run: |
          tar -xf ../downloads/libbs2b-${{env.libbs2b_version}}.tar.bz2
          cd libbs2b-${{env.libbs2b_version}}
          patch -p1 < ../../patches/libbs2b-msvc.patch

      - name: Compile libbs2b
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/libbs2b-${{env.libbs2b_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX=${{matrix.prefix_path_backslash}} -DBUILD_SHARED_LIBS=ON
          cmake --build .
          cmake --install .


      - name: Download ffmpeg
        shell: bash
        working-directory: sources
        run: git clone https://gitlab.freedesktop.org/gstreamer/meson-ports/ffmpeg

      - name: Compile ffmpeg
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path_forwardslash}}/include
          LDFLAGS: -L${{matrix.prefix_path_forwardslash}}/lib
        working-directory: sources/ffmpeg
        run: |
          meson --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload -Dtests=disabled -Dgpl=enabled build
          cd build
          ninja
          ninja install


      - name: Download Chromaprint
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "Chromaprint [this](https://github.com/acoustid/chromaprint/releases/download/v${{env.chromaprint_version}}/chromaprint-${{env.chromaprint_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract Chromaprint
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/chromaprint-${{env.chromaprint_version}}.tar.gz

      - name: Compile Chromaprint
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/chromaprint-${{env.chromaprint_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX=${{matrix.prefix_path_backslash}} -DBUILD_SHARED_LIBS=ON -DFFTW3_DIR=${{matrix.prefix_path_backslash}}
          cmake --build .
          cmake --install .


      - name: Download GStreamer
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "GStreamer [this](https://gstreamer.freedesktop.org/src/gstreamer/gstreamer-${{env.gstreamer_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract GStreamer
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/gstreamer-${{env.gstreamer_version}}.tar.xz

      - name: Compile GStreamer
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path_forwardslash}}/include
          LDFLAGS: -L${{matrix.prefix_path_forwardslash}}/lib
        working-directory: sources/gstreamer-${{env.gstreamer_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload -Dexamples=disabled -Dtests=disabled -Dbenchmarks=disabled -Ddoc=disabled build
          cd build
          ninja
          ninja install


      - name: Download gst-plugins-base
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "gst-plugins-base [this](https://gstreamer.freedesktop.org/src/gst-plugins-base/gst-plugins-base-${{env.gstreamer_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract gst-plugins-base
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/gst-plugins-base-${{env.gstreamer_version}}.tar.xz

      - name: Compile gst-plugins-base
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path_forwardslash}}/include -I${{matrix.prefix_path_forwardslash}}/include/opus
          LDFLAGS: -L${{matrix.prefix_path_forwardslash}}/lib
        working-directory: sources/gst-plugins-base-${{env.gstreamer_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload -Dexamples=disabled -Dtests=disabled -Dtools=enabled -Ddoc=disabled -Dorc=enabled -Dadder=enabled -Dapp=enabled -Daudioconvert=enabled -Daudiomixer=enabled -Daudiorate=enabled -Daudioresample=enabled -Daudiotestsrc=enabled -Dcompositor=disabled -Dencoding=disabled -Dgio=enabled -Dgio-typefinder=enabled -Doverlaycomposition=disabled -Dpbtypes=enabled -Dplayback=enabled -Drawparse=disabled -Dsubparse=disabled -Dtcp=enabled -Dtypefind=enabled -Dvideoconvert=disabled -Dvideorate=disabled -Dvideoscale=disabled -Dvideotestsrc=disabled -Dvolume=enabled -Dalsa=disabled -Dcdparanoia=disabled -Dlibvisual=disabled -Dogg=enabled -Dopus=enabled -Dpango=disabled -Dtheora=disabled -Dtremor=disabled -Dvorbis=enabled -Dx11=disabled -Dxshm=disabled -Dxvideo=disabled -Dgl=disabled -Dgl-graphene=disabled -Dgl-jpeg=disabled -Dgl-png=disabled build
          cd build
          ninja
          ninja install


      - name: Download gst-plugins-good
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "gst-plugins-good [this](https://gstreamer.freedesktop.org/src/gst-plugins-good/gst-plugins-good-${{env.gstreamer_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract gst-plugins-good
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/gst-plugins-good-${{env.gstreamer_version}}.tar.xz

      - name: Compile gst-plugins-good
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path_forwardslash}}/include
          LDFLAGS: -L${{matrix.prefix_path_forwardslash}}/lib
        working-directory: sources/gst-plugins-good-${{env.gstreamer_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload -Dexamples=disabled -Dtests=disabled -Ddoc=disabled -Dorc=enabled -Dalpha=disabled -Dapetag=enabled -Daudiofx=enabled -Daudioparsers=enabled -Dauparse=disabled -Dautodetect=enabled -Davi=disabled -Dcutter=disabled -Ddebugutils=disabled -Ddeinterlace=disabled -Ddtmf=disabled -Deffectv=disabled -Dequalizer=enabled -Dflv=disabled -Dflx=disabled -Dgoom=disabled -Dgoom2k1=disabled -Dicydemux=enabled -Did3demux=enabled -Dimagefreeze=disabled -Dinterleave=disabled -Disomp4=enabled -Dlaw=disabled -Dlevel=disabled -Dmatroska=disabled -Dmonoscope=disabled -Dmultifile=disabled -Dmultipart=disabled -Dreplaygain=enabled -Drtp=enabled -Drtpmanager=disabled -Drtsp=enabled -Dshapewipe=disabled -Dsmpte=disabled -Dspectrum=enabled -Dudp=enabled -Dvideobox=disabled -Dvideocrop=disabled -Dvideofilter=disabled -Dvideomixer=disabled -Dwavenc=enabled -Dwavparse=enabled -Dy4m=disabled -Daalib=disabled -Dbz2=disabled -Dcairo=disabled -Ddirectsound=enabled -Ddv=disabled -Ddv1394=disabled -Dflac=enabled -Dgdk-pixbuf=disabled -Dgtk3=disabled -Djack=disabled -Djpeg=disabled -Dlame=enabled -Dlibcaca=disabled -Dmpg123=enabled -Doss=disabled -Doss4=disabled -Dosxaudio=disabled -Dosxvideo=disabled -Dpng=disabled -Dpulse=disabled -Dqt5=disabled -Dshout2=disabled -Dsoup=enabled -Dspeex=enabled -Dtaglib=enabled -Dtwolame=enabled -Dvpx=disabled -Dwaveform=enabled -Dwavpack=enabled -Dximagesrc=disabled -Dv4l2=disabled -Dv4l2-libv4l2=disabled -Dv4l2-gudev=disabled build
          cd build
          ninja
          ninja install


      - name: Download gst-plugins-bad
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "gst-plugins-bad [this](https://gstreamer.freedesktop.org/src/gst-plugins-bad/gst-plugins-bad-${{env.gstreamer_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract gst-plugins-bad
        shell: bash
        working-directory: sources
        run: |
          tar -xf ../downloads/gst-plugins-bad-${{env.gstreamer_version}}.tar.xz
          cd gst-plugins-bad-${{env.gstreamer_version}}
          patch -p1 < ../../patches/gst-plugins-bad-libpaths.patch
          sed -i 's/c:\\msvc_x86_64\\lib/${{matrix.prefix_path_backslash2}}\\lib/g' ext/faad/meson.build
          sed -i 's/c:\\msvc_x86_64\\lib/${{matrix.prefix_path_backslash2}}\\lib/g' ext/faac/meson.build
          sed -i 's/c:\\msvc_x86_64\\lib/${{matrix.prefix_path_backslash2}}\\lib/g' ext/musepack/meson.build
          sed -i 's/c:\\msvc_x86_64\\lib/${{matrix.prefix_path_backslash2}}\\lib/g' ext/gme/meson.build

      - name: Compile gst-plugins-bad
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path_forwardslash}}/include -I${{matrix.prefix_path_forwardslash}}/include/opus
          LDFLAGS: -L${{matrix.prefix_path_forwardslash}}/lib
        working-directory: sources/gst-plugins-bad-${{env.gstreamer_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload -Dexamples=disabled -Dtests=disabled -Dexamples=disabled -Dgpl=enabled -Dorc=enabled -Daccurip=disabled -Dadpcmdec=disabled -Dadpcmenc=disabled -Daiff=enabled -Dasfmux=enabled -Daudiobuffersplit=disabled -Daudiofxbad=disabled -Daudiolatency=disabled -Daudiomixmatrix=disabled -Daudiovisualizers=disabled -Dautoconvert=disabled -Dbayer=disabled -Dcamerabin2=disabled -Dcodecalpha=disabled -Dcoloreffects=disabled -Ddebugutils=disabled -Ddvbsubenc=disabled -Ddvbsuboverlay=disabled -Ddvdspu=disabled -Dfaceoverlay=disabled -Dfestival=disabled -Dfieldanalysis=disabled -Dfreeverb=disabled -Dfrei0r=disabled -Dgaudieffects=disabled -Dgdp=disabled -Dgeometrictransform=disabled -Did3tag=enabled -Dinter=disabled -Dinterlace=disabled -Divfparse=disabled -Divtc=disabled -Djp2kdecimator=disabled -Djpegformat=disabled -Dlibrfb=disabled -Dmidi=disabled -Dmpegdemux=disabled -Dmpegpsmux=disabled -Dmpegtsdemux=disabled -Dmpegtsmux=disabled -Dmxf=disabled -Dnetsim=disabled -Donvif=disabled -Dpcapparse=disabled -Dpnm=disabled -Dproxy=disabled -Dqroverlay=disabled -Drawparse=disabled -Dremovesilence=enabled -Drist=disabled -Drtmp2=disabled -Drtp=disabled -Dsdp=disabled -Dsegmentclip=disabled -Dsiren=disabled -Dsmooth=disabled -Dspeed=disabled -Dsubenc=disabled -Dswitchbin=disabled -Dtimecode=disabled -Dvideofilters=disabled -Dvideoframe_audiolevel=disabled -Dvideoparsers=disabled -Dvideosignal=disabled -Dvmnc=disabled -Dy4m=disabled -Dopencv=disabled -Dwayland=disabled -Dx11=disabled -Daes=enabled -Daom=disabled -Davtp=disabled -Dandroidmedia=disabled -Dapplemedia=disabled -Dasio=disabled -Dassrender=disabled -Dbluez=enabled -Dbs2b=enabled -Dbz2=disabled -Dchromaprint=enabled -Dclosedcaption=disabled -Dcolormanagement=disabled -Dcurl=disabled -Dcurl-ssh2=disabled -Dd3dvideosink=disabled -Dd3d11=disabled -Ddash=enabled -Ddc1394=disabled -Ddecklink=disabled -Ddirectfb=disabled -Ddirectsound=enabled -Ddtls=disabled -Ddts=disabled -Ddvb=disabled -Dfaac=enabled -Dfaad=enabled -Dfbdev=disabled -Dfdkaac=enabled -Dflite=disabled -Dfluidsynth=disabled -Dgl=disabled -Dgme=enabled -Dgs=disabled -Dgsm=disabled -Dipcpipeline=disabled -Diqa=disabled -Dkate=disabled -Dkms=disabled -Dladspa=disabled -Dldac=disabled -Dlibde265=disabled -Dopenaptx=disabled -Dlv2=disabled -Dmediafoundation=disabled -Dmicrodns=disabled -Dmodplug=disabled -Dmpeg2enc=disabled -Dmplex=disabled -Dmsdk=disabled -Dmusepack=enabled -Dneon=disabled -Dnvcodec=disabled -Donnx=disabled -Dopenal=disabled -Dopenexr=disabled -Dopenh264=disabled -Dopenjpeg=disabled -Dopenmpt=enabled -Dopenni2=disabled -Dopensles=disabled -Dopus=enabled -Dresindvd=disabled -Drsvg=disabled -Drtmp=disabled -Dsbc=disabled -Dsctp=disabled -Dshm=disabled -Dsmoothstreaming=disabled -Dsndfile=disabled -Dsoundtouch=disabled -Dspandsp=disabled -Dsrt=disabled -Dsrtp=disabled -Dsvthevcenc=disabled -Dteletext=disabled -Dtinyalsa=disabled -Dtranscode=disabled -Dttml=disabled -Duvch264=disabled -Dva=disabled -Dvoaacenc=disabled -Dvoamrwbenc=disabled -Dvulkan=disabled -Dwasapi=enabled -Dwasapi2=enabled -Dwebp=disabled -Dwebrtc=disabled -Dwebrtcdsp=disabled -Dwildmidi=disabled -Dwinks=disabled -Dwinscreencap=disabled -Dx265=disabled -Dzbar=disabled -Dzxing=disabled -Dwpe=disabled -Dmagicleap=disabled -Dv4l2codecs=disabled -Disac=disabled -Dhls=enabled -Dhls-crypto=openssl build
          cd build
          ninja
          ninja install


      - name: Download gst-plugins-ugly
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "gst-plugins-ugly [this](https://gstreamer.freedesktop.org/src/gst-plugins-ugly/gst-plugins-ugly-${{env.gstreamer_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract gst-plugins-ugly
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/gst-plugins-ugly-${{env.gstreamer_version}}.tar.xz

      - name: Compile gst-plugins-ugly
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path_forwardslash}}/include
          LDFLAGS: -L${{matrix.prefix_path_forwardslash}}/lib
        working-directory: sources/gst-plugins-ugly-${{env.gstreamer_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload -Dtests=disabled -Ddoc=disabled -Dgpl=enabled -Dorc=enabled -Dasfdemux=enabled -Ddvdlpcmdec=disabled -Ddvdsub=disabled -Drealmedia=disabled -Dxingmux=enabled -Da52dec=disabled -Damrnb=disabled -Damrwbdec=disabled -Dcdio=disabled -Ddvdread=disabled -Dmpeg2dec=disabled -Dsidplay=disabled -Dx264=disabled build
          cd build
          ninja
          ninja install


      - name: Download gst-libav
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "gst-libav [this](https://gstreamer.freedesktop.org/src/gst-libav/gst-libav-${{env.gstreamer_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract gst-libav
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/gst-libav-${{env.gstreamer_version}}.tar.xz

      - name: Compile gst-libav
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path_forwardslash}}/include
          LDFLAGS: -L${{matrix.prefix_path_forwardslash}}/lib
        working-directory: sources/gst-libav-${{env.gstreamer_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix=${{matrix.prefix_path_backslash}} --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload -Dtests=disabled -Ddoc=disabled build
          cd build
          ninja
          ninja install


      - name: Download icu
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "icu [this](https://github.com/unicode-org/icu/releases/download/release-${{env.icu4c_version_dash}}/icu4c-${{env.icu4c_version_underscore}}-src.zip)!"
          target: downloads/
          auto-match: true

      - name: Extract icu
        shell: bash
        working-directory: sources
        run: 7z x ../downloads/icu4c-${{env.icu4c_version_underscore}}-src.zip

      - name: Compile icu
        shell: cmd
        env:
          CL: "/MP"
        working-directory: sources/icu/source/allinone
        run: msbuild allinone.sln /property:Configuration=${{matrix.buildtype}} /p:platform=${{matrix.msbuild_platform}} || goto end

      - name: Install icu
        shell: bash
        working-directory: sources/icu
        run: |
          cp -r include/unicode ${{matrix.prefix_path_unix}}/include/
          cp ${{matrix.libdir}}/{*.lib,*.pdb,*.exp} ${{matrix.prefix_path_unix}}/lib/
          cp ${{matrix.bindir}}/{*.dll,*.exe} ${{matrix.prefix_path_unix}}/bin/


      - name: Download expat
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "expat [this](https://jztkft.dl.sourceforge.net/project/expat/expat/${{env.expat_version}}/expat-${{env.expat_version}}.tar.bz2)!"
          target: downloads/
          auto-match: true

      - name: Extract expat
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/expat-${{env.expat_version}}.tar.bz2

      - name: Compile expat
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/expat-${{env.expat_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DEXPAT_SHARED_LIBS=ON -DEXPAT_BUILD_DOCS=OFF -DEXPAT_BUILD_EXAMPLES=OFF -DEXPAT_BUILD_FUZZERS=OFF -DEXPAT_BUILD_TESTS=OFF -DEXPAT_BUILD_TOOLS=OFF -DEXPAT_BUILD_PKGCONFIG=ON
          cmake --build .
          cmake --install .


      - name: Download freetype
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "freetype [this](https://netix.dl.sourceforge.net/project/freetype/freetype2/${{env.freetype_version}}/freetype-${{env.freetype_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract freetype (boostrap)
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/freetype-${{env.freetype_version}}.tar.gz

      - name: Compile freetype (boostrap)
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/freetype-${{env.freetype_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON
          cmake --build .
          cmake --install .

      - name: copy freetype (debug)
        if: matrix.buildtype == 'debug'
        shell: bash
        run: cp ${{matrix.prefix_path_unix}}/lib/freetyped.lib ${{matrix.prefix_path_unix}}/lib/freetype.lib


      - name: Download harfbuzz
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "harfbuzz [this](https://github.com/harfbuzz/harfbuzz/releases/download/${{env.harfbuzz_version}}/harfbuzz-${{env.harfbuzz_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract harfbuzz
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/harfbuzz-${{env.harfbuzz_version}}.tar.xz

      - name: Compile harfbuzz
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/harfbuzz-${{env.harfbuzz_version}}
        run: |
          meson --buildtype=${{matrix.buildtype}} --prefix="${{matrix.prefix_path_backslash}}" --pkg-config-path=${{matrix.prefix_path_backslash}}\lib\pkgconfig --wrap-mode=nodownload -Dtests=disabled -Ddocs=disabled -Dfreetype=enabled -Dicu=enabled build
          cd build
          ninja
          ninja install


      - name: Delete freetype bootstrap
        shell: bash
        working-directory: sources
        run: rm -rf freetype-${{env.freetype_version}}

      - name: Extract freetype
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/freetype-${{env.freetype_version}}.tar.gz

      - name: Compile freetype
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/freetype-${{env.freetype_version}}
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON
          cmake --build .
          cmake --install .

      - name: copy freetype (debug)
        if: matrix.buildtype == 'debug'
        shell: bash
        run: cp ${{matrix.prefix_path_unix}}/lib/freetyped.lib ${{matrix.prefix_path_unix}}/lib/freetype.lib


      - name: Download Protobuf
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "Protobuf [this](https://github.com/protocolbuffers/protobuf/releases/download/v${{env.protobuf_version}}/protobuf-cpp-3.${{env.protobuf_version}}.tar.gz)!"
          target: downloads/
          auto-match: true

      - name: Extract Protobuf
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/protobuf-cpp-3.${{env.protobuf_version}}.tar.gz

      - name: Compile Protobuf
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
        working-directory: sources/protobuf-3.${{env.protobuf_version}}/cmake
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}" -Dprotobuf_BUILD_SHARED_LIBS=ON -Dprotobuf_BUILD_TESTS=OFF
          cmake --build .
          cmake --install .
          copy protobuf.pc ${{matrix.prefix_path_backslash}}\lib\pkgconfig\


      - name: Download qtbase
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "qtbase [this](https://download.qt.io/official_releases/qt/${{env.qt_version_short}}/${{env.qt_version}}/submodules/qtbase-everywhere-src-${{env.qt_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract qtbase
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/qtbase-everywhere-src-${{env.qt_version}}.tar.xz

      - name: Copy sqlite3
        shell: bash
        working-directory: sources
        run: cp sqlite-*/sqlite3.{c,h} qtbase-everywhere-src-${{env.qt_version}}/src/3rdparty/sqlite/

      - name: Delete harfbuzz.pc
        shell: bash
        run: rm -f "${{matrix.prefix_path_unix}}/lib/pkgconfig/harfbuzz.pc"

      - name: Configure qtbase
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path_forwardslash}}/include
          LDFLAGS: -L${{matrix.prefix_path_forwardslash}}/lib
        run: >
          cmake -S sources/qtbase-everywhere-src-${{env.qt_version}} -B sources/qtbase-everywhere-src-${{env.qt_version}}/build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{matrix.buildtype}}
          -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_backslash}}"
          -DBUILD_SHARED_LIBS=ON
          -DPKG_CONFIG_EXECUTABLE="${{matrix.prefix_path_backslash}}\bin\pkgconf.exe"
          -DQT_BUILD_EXAMPLES=OFF
          -DQT_BUILD_BENCHMARKS=OFF
          -DQT_BUILD_TESTS=OFF
          -DQT_BUILD_EXAMPLES_BY_DEFAULT=OFF
          -DQT_BUILD_TOOLS_BY_DEFAULT=ON
          -DQT_WILL_BUILD_TOOLS=ON
          -DBUILD_WITH_PCH=OFF
          -DFEATURE_rpath=OFF
          -DFEATURE_pkg_config=ON
          -DFEATURE_accessibility=ON
          -DFEATURE_fontconfig=OFF
          -DFEATURE_freetype=ON
          -DFEATURE_harfbuzz=ON
          -DFEATURE_pcre2=ON
          -DFEATURE_openssl=ON
          -DFEATURE_openssl_linked=ON
          -DFEATURE_opengl=ON
          -DFEATURE_opengl_dynamic=ON
          -DFEATURE_use_gold_linker_alias=OFF
          -DFEATURE_glib=ON
          -DFEATURE_icu=ON
          -DFEATURE_directfb=OFF
          -DFEATURE_dbus=OFF
          -DFEATURE_sql=ON
          -DFEATURE_sql_sqlite=ON
          -DFEATURE_sql_odbc=OFF
          -DFEATURE_sql_mysql=OFF
          -DFEATURE_sql_psql=OFF
          -DFEATURE_jpeg=ON
          -DFEATURE_png=ON
          -DFEATURE_gif=ON
          -DFEATURE_style_windows=ON
          -DFEATURE_style_windowsvista=ON
          -DFEATURE_system_zlib=ON
          -DFEATURE_system_png=ON
          -DFEATURE_system_jpeg=ON
          -DFEATURE_system_pcre2=ON
          -DFEATURE_system_freetype=ON
          -DFEATURE_system_harfbuzz=ON
          -DFEATURE_system_sqlite=ON
          -DICU_ROOT="${{matrix.prefix_path_backslash}}"

      - name: Build qtbase
        shell: cmd
        working-directory: sources/qtbase-everywhere-src-${{env.qt_version}}/build
        run: cmake --build .

      - name: Install qtbase
        shell: cmd
        working-directory: sources/qtbase-everywhere-src-${{env.qt_version}}/build
        run: cmake --install .


      - name: Download qttools
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "qttools [this](https://download.qt.io/official_releases/qt/${{env.qt_version_short}}/${{env.qt_version}}/submodules/qttools-everywhere-src-${{env.qt_version}}.tar.xz)!"
          target: downloads/
          auto-match: true

      - name: Extract qttools
        shell: bash
        working-directory: sources
        run: tar -xf ../downloads/qttools-everywhere-src-${{env.qt_version}}.tar.xz

      - name: Configure qttools
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path_forwardslash}}/include
          LDFLAGS: -L${{matrix.prefix_path_forwardslash}}/lib
        working-directory: sources/qttools-everywhere-src-${{env.qt_version}}
        run: |
          mkdir build
          cd build
          ${{matrix.prefix_path_backslash}}\bin\qt-configure-module.bat .. -feature-linguist -no-feature-assistant -no-feature-designer

      - name: Compile qttools
        shell: cmd
        working-directory: sources/qttools-everywhere-src-${{env.qt_version}}/build
        run: cmake --build .

      - name: Install qttools
        shell: cmd
        working-directory: sources/qttools-everywhere-src-${{env.qt_version}}/build
        run: cmake --install .


      - name: Download qtsparkle
        shell: bash
        working-directory: sources
        run: |
          git clone https://github.com/davidsansome/qtsparkle qtsparkle-git
          cd qtsparkle-git
          patch -p1 < ../../patches/qtsparkle-msvc.patch

      - name: Compile qtsparkle
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{matrix.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{matrix.prefix_path_backslash}}\lib\pkgconfig
          CFLAGS: -I${{matrix.prefix_path_forwardslash}}/include
          LDFLAGS: -L${{matrix.prefix_path_forwardslash}}/lib
        working-directory: sources/qtsparkle-git
        run: |
          mkdir build
          cd build
          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DBUILD_WITH_QT6=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_PREFIX_PATH=${{matrix.prefix_path_backslash}}\lib\cmake -DCMAKE_INSTALL_PREFIX="${{matrix.prefix_path_forwardslash}}"
          cmake --build .
          cmake --install .

      - name: Create qtsparkle pkg-config file
        shell: bash
        run: |
          echo "prefix=${{matrix.prefix_path_forwardslash}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/qtsparkle-qt6.pc
          echo "exec_prefix=${{matrix.prefix_path_forwardslash}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/qtsparkle-qt6.pc
          echo "libdir=${{matrix.prefix_path_forwardslash}}/lib" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/qtsparkle-qt6.pc
          echo "includedir=${{matrix.prefix_path_forwardslash}}/include" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/qtsparkle-qt6.pc
          echo "" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/qtsparkle-qt6.pc
          echo "Name: qtsparkle-qt6" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/qtsparkle-qt6.pc
          echo "Version: " >>${{matrix.prefix_path_unix}}/lib/pkgconfig/qtsparkle-qt6.pc
          echo "Description: Qt auto-updater lib" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/qtsparkle-qt6.pc
          echo "Libs: -L${{matrix.prefix_path_forwardslash}} -lqtsparkle-qt6" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/qtsparkle-qt6.pc
          echo "Cflags: -I${{matrix.prefix_path_forwardslash}}" >>${{matrix.prefix_path_unix}}/lib/pkgconfig/qtsparkle-qt6.pc

          cat ${{matrix.prefix_path_unix}}/lib/pkgconfig/qtsparkle-qt6.pc


      - name: Create archive
        shell: bash
        run: tar -cJf strawberry-msvc-${{matrix.arch}}-${{matrix.buildtype}}.tar.xz --transform "s,^c/strawberry_msvc_${{matrix.arch}}_${{matrix.buildtype}},strawberry_msvc_${{matrix.arch}}_${{matrix.buildtype}}," ${{matrix.prefix_path_unix}}

      - uses: actions/upload-artifact@v3
        with:
          name: releases
          path: strawberry-msvc-${{matrix.arch}}-${{matrix.buildtype}}.tar.xz


  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/release'
    needs:
      - build-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set release tag
        run: echo "release_tag=release-$GITHUB_RUN_ID" >> $GITHUB_ENV

      - name: Set have release
        run: echo "have_release=$(git tag -l | grep ${{env.release_tag}} >/dev/null 2>&1 && echo 1 || echo 0)" >> $GITHUB_ENV

      - name: Delete existing release
        if: env.have_release == '1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          hub release delete "${{env.release_tag}}"
          git tag -d "${{env.release_tag}}"
          git push --delete origin "${{env.release_tag}}"

      - name: Delete old releases
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          while [ "$(git tag | wc -l)" -ge "${{env.max_releases}}" ]; do
            oldest_tag=$(git tag | head -1)
            hub release delete "$oldest_tag"
            git tag -d "$oldest_tag"
            git push --delete origin "$oldest_tag"
          done

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: releases

      - name: Set release notes file
        run: echo "release_notes_file=release_notes.txt" >> $GITHUB_ENV

      - name: Create release notes
        run: |
          echo "Strawberry MSVC Dependencies Release $GITHUB_RUN_ID" > "${{env.release_notes_file}}"
          echo "" >> "${{env.release_notes_file}}"
          echo "Libraries:" >> "${{env.release_notes_file}}"
          echo "" >> "${{env.release_notes_file}}"
          echo "* Boost ${{env.boost_version}}" >> "${{env.release_notes_file}}"
          echo "* zlib ${{env.zlib_version}}" >> "${{env.release_notes_file}}"
          echo "* OpenSSL ${{env.openssl_version}}" >> "${{env.release_notes_file}}"
          echo "* GnuTLS ${{env.gnutls_version}}" >> "${{env.release_notes_file}}"
          echo "* libng ${{env.libpng_version}}" >> "${{env.release_notes_file}}"
          echo "* libjpeg-turbo ${{env.libjpeg_turbo_version}}" >> "${{env.release_notes_file}}"
          echo "* PCRE2 ${{env.pcre2_version}}" >> "${{env.release_notes_file}}"
          echo "* bzip2 ${{env.bzip2_version}}" >> "${{env.release_notes_file}}"
          echo "* xz ${{env.xz_version}}" >> "${{env.release_notes_file}}"
          echo "* Brotli ${{env.brotli_version}}" >> "${{env.release_notes_file}}"
          echo "* Pixmap ${{env.pixmap_version}}" >> "${{env.release_notes_file}}"
          echo "* libxml2 ${{env.libxml2_version}}" >> "${{env.release_notes_file}}"
          echo "* nghttp2 ${{env.nghttp2_version}}" >> "${{env.release_notes_file}}"
          echo "* SQLite ${{env.sqlite3_version}}" >> "${{env.release_notes_file}}"
          echo "* libogg ${{env.libogg_version}}" >> "${{env.release_notes_file}}"
          echo "* libvorbis ${{env.libvorbis_version}}" >> "${{env.release_notes_file}}"
          echo "* FLAC ${{env.flac_version}}" >> "${{env.release_notes_file}}"
          echo "* WavPack ${{env.wavpack_version}}" >> "${{env.release_notes_file}}"
          echo "* Opus Codec ${{env.opus_version}}" >> "${{env.release_notes_file}}"
          echo "* opusfile ${{env.opusfile_version}}" >> "${{env.release_notes_file}}"
          echo "* MPG123 ${{env.mpg123_version}}" >> "${{env.release_notes_file}}"
          echo "* LAME ${{env.lame_version}}" >> "${{env.release_notes_file}}"
          echo "* TwoLAME ${{env.twolame_version}}" >> "${{env.release_notes_file}}"
          echo "* TagLib ${{env.taglib_version}}" >> "${{env.release_notes_file}}"
          echo "* dlfcn ${{env.dlfcn_version}}" >> "${{env.release_notes_file}}"
          echo "* fftw ${{env.fftw_version}}" >> "${{env.release_notes_file}}"
          echo "* GLib ${{env.glib_version}}" >> "${{env.release_notes_file}}"
          echo "* GLib Networking ${{env.glib_networking_version}}" >> "${{env.release_notes_file}}"
          echo "* libpsl ${{env.libpsl_version}}" >> "${{env.release_notes_file}}"
          echo "* libsoup ${{env.libsoup_version}}" >> "${{env.release_notes_file}}"
          echo "* orc ${{env.orc_version}}" >> "${{env.release_notes_file}}"
          echo "* Musepack ${{env.musepack_version}}" >> "${{env.release_notes_file}}"
          echo "* libopenmpt ${{env.libopenmpt_version}}" >> "${{env.release_notes_file}}"
          echo "* libgme ${{env.libgme_version}}" >> "${{env.release_notes_file}}"
          echo "* fdk-aac ${{env.fdk_aac_version}}" >> "${{env.release_notes_file}}"
          echo "* libbs2b ${{env.libbs2b_version}}" >> "${{env.release_notes_file}}"
          echo "* Chromaprint ${{env.chromaprint_version}}" >> "${{env.release_notes_file}}"
          echo "* GStreamer ${{env.gstreamer_version}}" >> "${{env.release_notes_file}}"
          echo "* ICU4C ${{env.icu4c_version}}" >> "${{env.release_notes_file}}"
          echo "* Expat ${{env.expat_version}}" >> "${{env.release_notes_file}}"
          echo "* FreeType ${{env.freetype_version}}" >> "${{env.release_notes_file}}"
          echo "* Harfbuzz ${{env.harfbuzz_version}}" >> "${{env.release_notes_file}}"
          echo "* Protobuf ${{env.protobuf_version}}" >> "${{env.release_notes_file}}"
          echo "* Qt ${{env.qt_version}}" >> "${{env.release_notes_file}}"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          set -x
          files=()
          for file in $(find releases -type f); do
            echo "Adding file: ${file}"
            files+=("-a" "${file}")
          done
          hub release create -t "$GITHUB_SHA" "${files[@]}" -F "${{env.release_notes_file}}" "${{env.release_tag}}"
