From f44b0883affd1cad236aaf726def09c9ad4037ca Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Wed, 26 Jul 2023 21:09:28 -0300
Subject: [PATCH 01/28] meson: Allow building with Microsoft supplied Clang

---
 meson.build | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/meson.build b/meson.build
index d3da868dde..e2f40f8cb3 100644
--- a/meson.build
+++ b/meson.build
@@ -2688,7 +2688,7 @@ makedef = find_program('compat/windows/makedef.py')
 
 makedef_args = [makedef]
 
-if cc.get_id() != 'msvc'
+if cc.get_define('_MSC_VER') == ''
   nm = find_program('nm', required: true)
   makedef_args += ['--nm', nm]
 else
-- 
GitLab


From 4a49ab3b838587988dc0343e427c65f2ba18739d Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Wed, 26 Jul 2023 21:14:25 -0300
Subject: [PATCH 02/28] os_support, network: Fix build failure on Windows with
 BZIP2

Including winsock2.h without WIN32_LEAN_AND_MEAN causes bzlib.h to parse
as nonsense, due to an instance of #define char small in rpcndr.h
(included transitively from windows.h).

See:

https://stackoverflow.com/a/27794577
---
 compat/w32dlfcn.h        | 2 +-
 libavcodec/mf_utils.h    | 1 +
 libavformat/network.h    | 1 +
 libavformat/os_support.c | 6 ++----
 libavformat/os_support.h | 2 ++
 5 files changed, 7 insertions(+), 5 deletions(-)

diff --git a/compat/w32dlfcn.h b/compat/w32dlfcn.h
index fb1aa1b72e..ba2837a465 100644
--- a/compat/w32dlfcn.h
+++ b/compat/w32dlfcn.h
@@ -21,7 +21,7 @@
 
 #ifdef _WIN32
 #include <stdint.h>
-
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 #include "config.h"
diff --git a/libavcodec/mf_utils.h b/libavcodec/mf_utils.h
index aebfb9ad21..5b6d2e9b66 100644
--- a/libavcodec/mf_utils.h
+++ b/libavcodec/mf_utils.h
@@ -19,6 +19,7 @@
 #ifndef AVCODEC_MF_UTILS_H
 #define AVCODEC_MF_UTILS_H
 
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <initguid.h>
 #ifdef _MSC_VER
diff --git a/libavformat/network.h b/libavformat/network.h
index 71c49a73fb..edfc685d91 100644
--- a/libavformat/network.h
+++ b/libavformat/network.h
@@ -35,6 +35,7 @@
 #endif
 
 #if HAVE_WINSOCK2_H
+#define WIN32_LEAN_AND_MEAN
 #include <winsock2.h>
 #include <ws2tcpip.h>
 
diff --git a/libavformat/os_support.c b/libavformat/os_support.c
index 15cea7fa5b..2de6a7c3d9 100644
--- a/libavformat/os_support.c
+++ b/libavformat/os_support.c
@@ -34,11 +34,9 @@
 #if HAVE_SYS_TIME_H
 #include <sys/time.h>
 #endif /* HAVE_SYS_TIME_H */
-#if HAVE_WINSOCK2_H
-#include <winsock2.h>
-#elif HAVE_SYS_SELECT_H
+#if HAVE_SYS_SELECT_H
 #include <sys/select.h>
-#endif /* HAVE_WINSOCK2_H */
+#endif /* HAVE_SYS_SELECT_H */
 #endif /* !HAVE_POLL_H */
 
 #include "network.h"
diff --git a/libavformat/os_support.h b/libavformat/os_support.h
index f2ff38e23b..e2e989d3b7 100644
--- a/libavformat/os_support.h
+++ b/libavformat/os_support.h
@@ -140,6 +140,7 @@ typedef int socklen_t;
 typedef unsigned long nfds_t;
 
 #if HAVE_WINSOCK2_H
+#define WIN32_LEAN_AND_MEAN
 #include <winsock2.h>
 #endif
 #if !HAVE_STRUCT_POLLFD
@@ -171,6 +172,7 @@ int ff_poll(struct pollfd *fds, nfds_t numfds, int timeout);
 #endif /* CONFIG_NETWORK */
 
 #ifdef _WIN32
+#define WIN32_LEAN_AND_MEAN
 #include <stdio.h>
 #include <windows.h>
 #include "libavutil/wchar_filename.h"
-- 
GitLab


From fae0ddbe9f955ede45e76a617ee842d8c9e0d9d3 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Wed, 26 Jul 2023 21:49:14 -0300
Subject: [PATCH 03/28] meson: Work around Binutils <2.37 lacking nm -j

---
 compat/windows/makedef.py | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/compat/windows/makedef.py b/compat/windows/makedef.py
index 5e9ab858c2..9b331e5a66 100644
--- a/compat/windows/makedef.py
+++ b/compat/windows/makedef.py
@@ -73,7 +73,11 @@ if __name__ == '__main__':
         # Add -j to ensure only symbol names are output (otherwise in macOS
         # a race condition can occur in the redirection)
         s = subprocess.run([args.nm, '--defined-only',
-                            '-g', '-j', libname], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True, check=True)
+                            '-g', '-j', libname], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True, check=False)
+        if s.returncode != 0:
+            # -j was added only in Binutils 2.37
+            s = subprocess.run([args.nm, '--defined-only',
+                                '-g', libname], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, universal_newlines=True, check=True)
         dump = s.stdout.splitlines()
         # Exclude lines with ':' (object name)
         dump = [x for x in dump if ":" not in x]
-- 
GitLab


From da080861134101b1d72f6ae9d7b607ed543b860a Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Thu, 27 Jul 2023 12:13:36 -0300
Subject: [PATCH 04/28] meson: Fix CLI program generation

Turns out, the parse_sources script never covered libavdevice nor
fftools...
---
 fftools/meson.build     | 82 +++++++++++++++++++++++++++++++++--------
 libavdevice/meson.build | 10 ++++-
 meson.build             |  8 ++--
 parse_sources.py        |  6 +++
 4 files changed, 87 insertions(+), 19 deletions(-)

diff --git a/fftools/meson.build b/fftools/meson.build
index f87bdc924d..200baccb5c 100644
--- a/fftools/meson.build
+++ b/fftools/meson.build
@@ -1,20 +1,72 @@
-ffmpeg_sources = files([
-  'ffmpeg.c',
-  'ffmpeg_opt.c',
-  'ffmpeg_filter.c',
-  'ffmpeg_hw.c',
+#### --- GENERATED --- ####
+
+fftools_sources = files(
   'cmdutils.c',
-])
+  'opt_common.c',
+)
 
-ffmpeg_optional_sources = {
+fftools_optional_sources = {
+  # MANUAL 'ffmpeg ' : files('ffmpeg_demux.c','ffmpeg_filter.c','ffmpeg_hw.c','ffmpeg_mux.c','ffmpeg_mux_init.c','ffmpeg_opt.c','objpool.c','sync_queue.c','thread_queue.c'),
 }
 
-ffplay_sources = files([
-  'ffplay.c',
-  'cmdutils.c',
-])
+fftools_x86asm_optional_sources = {
+}
 
-ffprobe_sources = files([
-  'ffprobe.c',
-  'cmdutils.c',
-])
+fftools_armv5te_optional_sources = {
+}
+
+fftools_armv6_optional_sources = {
+}
+
+fftools_armv8_optional_sources = {
+}
+
+fftools_neon_optional_sources = {
+}
+
+fftools_vfp_optional_sources = {
+}
+
+fftools_mmx_optional_sources = {
+}
+
+fftools_shlib_optional_sources = {
+}
+
+fftools_slib_optional_sources = {
+}
+
+fftools_optional_tests = {
+}
+
+#### --- END GENERATED --- ####
+
+ffmpeg_sources = files(
+  'ffmpeg_demux.c',
+  'ffmpeg_filter.c',
+  'ffmpeg_hw.c',
+  'ffmpeg_mux.c',
+  'ffmpeg_mux_init.c',
+  'ffmpeg_opt.c',
+  'objpool.c',
+  'sync_queue.c',
+  'thread_queue.c',
+  'ffmpeg.c'
+)
+
+ffplay_sources = files(
+  'ffplay.c'
+)
+
+ffprobe_sources = files(
+  'ffprobe.c'
+)
+
+if host_machine.system() == 'windows'
+  fftoolsres = windows.compile_resources(files('fftoolsres.rc'),
+    depend_files: files('fftools.manifest'),
+    include_directories: include_directories('.')
+  )
+
+  fftools_sources += fftoolsres
+endif
diff --git a/libavdevice/meson.build b/libavdevice/meson.build
index 90fabbcff8..3a67100738 100644
--- a/libavdevice/meson.build
+++ b/libavdevice/meson.build
@@ -18,7 +18,7 @@ libavdevice_sources = files(
   'alldevices.c',
   'avdevice.c',
   'utils.c',
-  'file_open.c',
+  'version.c',
 )
 
 libavdevice_optional_sources = {
@@ -40,6 +40,7 @@ libavdevice_optional_sources = {
   'kmsgrab_indev' : files('kmsgrab.c'),
   'lavfi_indev' : files('lavfi.c'),
   'libcdio_indev' : files('libcdio.c'),
+  'libc_msvcrt' : files('file_open.c'),
   'libdc1394_indev' : files('libdc1394.c'),
   'openal_indev' : files('openal-dec.c'),
   'opengl_outdev' : files('opengl_enc.c'),
@@ -78,6 +79,13 @@ libavdevice_vfp_optional_sources = {
 libavdevice_mmx_optional_sources = {
 }
 
+libavdevice_shlib_optional_sources = {
+  'decklink_indev' : files('reverse.c'),
+}
+
+libavdevice_slib_optional_sources = {
+}
+
 libavdevice_optional_tests = {
   'jack_indev' : [
     ['timefilter', files('tests/timefilter.c')],
diff --git a/meson.build b/meson.build
index e2f40f8cb3..061e9f7177 100644
--- a/meson.build
+++ b/meson.build
@@ -72,6 +72,8 @@ common_incs = [ffmpeg_toplevel_inc]
 
 python3 = import('python').find_installation()
 
+windows = import('windows')
+
 cc = meson.get_compiler('c')
 
 languages_map = {}
@@ -2682,8 +2684,6 @@ built_libs = [
   ['avdevice', ['libavutil', 'libavformat', 'libavfilter', 'libavcodec']],
 ]
 
-windows = import('windows')
-
 makedef = find_program('compat/windows/makedef.py')
 
 makedef_args = [makedef]
@@ -3027,7 +3027,9 @@ if not get_option('cli').disabled()
 endif
 
 foreach built_exe : built_exe_list
-  sources = get_variable('@0@_sources'.format(built_exe)) + [ffversion_h]
+  sources = get_variable('fftools_sources', []) + [ffversion_h]
+  sources += get_variable('fftools_optional_sources', {}).get(built_exe, [])
+  sources += get_variable('@0@_sources'.format(built_exe), [])
   optional_deps = []
 
   message('Checking @0@ dependencies'.format(built_exe))
diff --git a/parse_sources.py b/parse_sources.py
index 8b02c80e1d..3ba923da6d 100644
--- a/parse_sources.py
+++ b/parse_sources.py
@@ -92,6 +92,10 @@ def make_to_meson(path):
                 label, ofiles = l.split('+=')
                 label = label.split('HAVE_')[1].rstrip(' )')
                 source_type = 'c'
+            elif re.match('OBJS-ffmpeg\s+\+\=.*', l):
+                label, ofiles = l.split('+=')
+                label = label.split('OBJS-')[1]
+                source_type = 'c' # arguable ^^
             elif re.match('DNN-OBJS-.*CONFIG.*\+\=.*', l):
                 label, ofiles = l.split('+=')
                 label = label.split('CONFIG_')[1].rstrip(' )')
@@ -360,6 +364,8 @@ def make_to_meson(path):
         meson_file.write(content)
 
 paths = [
+        'fftools',
+        'libavdevice',
         'libavformat',
         'libavutil',
         'libavutil/aarch64',
-- 
GitLab


From 663824fc06667296115e41462d003ec6d5b84600 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Thu, 27 Jul 2023 19:44:08 -0300
Subject: [PATCH 05/28] meson: Fix upstream's manual filter disabling not
 taking effect

---
 meson.build | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/meson.build b/meson.build
index 061e9f7177..3d3454ae66 100644
--- a/meson.build
+++ b/meson.build
@@ -2504,7 +2504,11 @@ filters_allowed = get_option('filters').allowed()
 
 foreach filter : filter_list
   opt = get_option(filter)
+  if conf.get(filter, 1) == 1
   conf.set(filter, (opt.enabled() or (opt.allowed() and filters_allowed)).to_int())
+  else
+    message('Skipping @0@ because of manual disabling'.format(filter))
+  endif
 endforeach
 
 foreach program : program_list
-- 
GitLab


From 55eb5d0ee1f2316addc35802b88b356d9105146d Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@amyspark.me>
Date: Sat, 29 Jul 2023 18:25:11 +0000
Subject: [PATCH 06/28] avdevice: Fix disabling audiotoolbox_outdev build on
 iOS

audiotoolbox.m uses CoreAudio APIs that are only available in macOS.
The existing CoreAudio framework check is already enough for this case
(as CoreAudio.h does not exist for the iDevices), however, it was never
passed as a dependency of audiotoolbox_outdev. This caused the
build system to include that output device into the targets.
---
 configure   | 2 +-
 depgraph.py | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/configure b/configure
index b6616f00b6..31bd5b4268 100755
--- a/configure
+++ b/configure
@@ -3511,7 +3511,7 @@ alsa_outdev_deps="alsa"
 avfoundation_indev_deps="avfoundation corevideo coremedia pthreads"
 avfoundation_indev_suggest="coregraphics applicationservices"
 avfoundation_indev_extralibs="-framework Foundation"
-audiotoolbox_outdev_deps="audiotoolbox pthreads"
+audiotoolbox_outdev_deps="audiotoolbox coreaudio pthreads"
 audiotoolbox_outdev_extralibs="-framework AudioToolbox -framework CoreAudio"
 bktr_indev_deps_any="dev_bktr_ioctl_bt848_h machine_ioctl_bt848_h dev_video_bktr_ioctl_bt848_h dev_ic_bt8xx_h"
 caca_outdev_deps="libcaca"
diff --git a/depgraph.py b/depgraph.py
index 69a84beab0..a7cbeeeed1 100644
--- a/depgraph.py
+++ b/depgraph.py
@@ -96,7 +96,7 @@ GRAPH = {'aac_adtstoasc_bsf': {'select': ['adts_header', 'mpeg4audio']},
  'atomics_suncc': {'if': ['atomic_cas_ptr', 'machine_rw_barrier']},
  'atomics_win32': {'if': ['memorybarrier']},
  'atrac1_decoder': {'select': ['sinewin']},
- 'audiotoolbox_outdev': {'deps': ['audiotoolbox', 'pthreads']},
+ 'audiotoolbox_outdev': {'deps': ['audiotoolbox', 'pthreads', 'coreaudio']},
  'av1_amf_encoder': {'deps': ['amf']},
  'av1_cuvid_decoder': {'deps': ['cuvid', 'cuvidav1picparams']},
  'av1_d3d11va2_hwaccel': {'deps': ['d3d11va', 'dxva_picparams_av1'],
-- 
GitLab


From 538affd1c2d6bdde721ddeb24d5ae8a1a8255138 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Sat, 29 Jul 2023 18:24:39 +0000
Subject: [PATCH 07/28] meson: Refactor order of checks for consistency

---
 meson.build | 36 ++++++++++++++++++------------------
 1 file changed, 18 insertions(+), 18 deletions(-)

diff --git a/meson.build b/meson.build
index 3d3454ae66..9a0b23e6d4 100644
--- a/meson.build
+++ b/meson.build
@@ -1002,10 +1002,6 @@ check_components = [
     {'preconditions': ['libm'], 'extra_deps': ['libm_extra_deps']}],
 ]
 
-foreach check : check_components
-  all_checks += [['component', check]]
-endforeach
-
 check_header_funcs = [
   ['aligned_malloc', ['malloc.h'], {'funcs': ['_aligned_malloc']}],
   ['arc4random', ['stdlib.h']],
@@ -1136,18 +1132,6 @@ elif cc.has_header('winsock2.h')
   ]
 endif
 
-foreach check : check_funcs
-  all_checks += [['func', check]]
-endforeach
-
-foreach check : check_header_funcs
-  all_checks += [['header-func', check]]
-endforeach
-
-foreach check : check_types
-  all_checks += [['type', check]]
-endforeach
-
 check_headers = [
   ['direct.h'],
   ['dirent.h'],
@@ -1172,6 +1156,22 @@ elif host_machine.system() == 'android'
   check_headers += [['jni.h']]
 endif
 
+foreach check : check_components
+  all_checks += [['component', check]]
+endforeach
+
+foreach check : check_funcs
+  all_checks += [['func', check]]
+endforeach
+
+foreach check : check_header_funcs
+  all_checks += [['header-func', check]]
+endforeach
+
+foreach check : check_types
+  all_checks += [['type', check]]
+endforeach
+
 foreach check : check_headers
   all_checks += [['header', check]]
 endforeach
@@ -1921,9 +1921,9 @@ foreach check : all_checks
     endforeach
 
     if found
-      set_variable('@0@_extra_deps'.format(name.to_lower().underscorify()), extra_deps)
+      set_variable('@0@_extra_deps'.format(name.underscorify().to_lower()), extra_deps)
     else
-      set_variable('@0@_extra_deps'.format(name.to_lower().underscorify()), [])
+      set_variable('@0@_extra_deps'.format(name.underscorify().to_lower()), [])
     endif
   endif
 endforeach
-- 
GitLab


From e8a2b3200900b8eada7354512adb70be9960a6d7 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Sat, 29 Jul 2023 18:24:39 +0000
Subject: [PATCH 08/28] meson: Complete implementation of TLS support

---
 libavformat/meson.build |  6 ++++++
 meson.build             | 32 ++++++++++++++++++++++++--------
 meson_options.txt       |  3 +++
 parse_sources.py        |  4 ++++
 4 files changed, 37 insertions(+), 8 deletions(-)

diff --git a/libavformat/meson.build b/libavformat/meson.build
index 62a284478b..07fff0a4c6 100644
--- a/libavformat/meson.build
+++ b/libavformat/meson.build
@@ -213,6 +213,7 @@ libavformat_optional_sources = {
   'genh_demuxer' : files('genh.c'),
   'gif_demuxer' : files('gifdec.c'),
   'gif_muxer' : files('gif.c'),
+  'gnutls' : files('tls_gnutls.c'),
   'gophers_protocol' : files('gopher.c'),
   'gopher_protocol' : files('gopher.c'),
   'gsm_demuxer' : files('gsmdec.c'),
@@ -324,6 +325,7 @@ libavformat_optional_sources = {
   'libsmbclient_protocol' : files('libsmbclient.c'),
   'libsrt_protocol' : files('libsrt.c'),
   'libssh_protocol' : files('libssh.c'),
+  'libtls' : files('tls_libtls.c'),
   'libzmq_protocol' : files('libzmq.c'),
   'live_flv_demuxer' : files('flvdec.c'),
   'lmlm4_demuxer' : files('lmlm4.c'),
@@ -337,6 +339,7 @@ libavformat_optional_sources = {
   'm4v_muxer' : files('rawenc.c'),
   'matroska_demuxer' : files('matroskadec.c','matroska.c','flac_picture.c','rmsipr.c','oggparsevorbis.c','vorbiscomment.c','qtpalette.c','replaygain.c','dovi_isom.c'),
   'matroska_muxer' : files('matroskaenc.c','matroska.c','av1.c','avc.c','hevc.c','flacenc_header.c','avlanguage.c','vorbiscomment.c','wv.c','dovi_isom.c'),
+  'mbedtls' : files('tls_mbedtls.c'),
   'mca_demuxer' : files('mca.c'),
   'mcc_demuxer' : files('mccdec.c','subtitles.c'),
   'md5_muxer' : files('hashenc.c'),
@@ -408,6 +411,7 @@ libavformat_optional_sources = {
   'ogv_muxer' : files('oggenc.c','vorbiscomment.c'),
   'oma_demuxer' : files('omadec.c','pcm.c','oma.c'),
   'oma_muxer' : files('omaenc.c','rawenc.c','oma.c','id3v2enc.c'),
+  'openssl' : files('tls_openssl.c'),
   'opus_muxer' : files('oggenc.c','vorbiscomment.c'),
   'paf_demuxer' : files('paf.c'),
   'pcm_alaw_demuxer' : files('pcmdec.c','pcm.c'),
@@ -500,12 +504,14 @@ libavformat_optional_sources = {
   'scc_demuxer' : files('sccdec.c','subtitles.c'),
   'scc_muxer' : files('sccenc.c'),
   'scd_demuxer' : files('scd.c'),
+  'schannel' : files('tls_schannel.c'),
   'sctp_protocol' : files('sctp.c'),
   'sdns_demuxer' : files('sdns.c'),
   'sdp_demuxer' : files('rtsp.c'),
   'sdr2_demuxer' : files('sdr2.c'),
   'sds_demuxer' : files('sdsdec.c'),
   'sdx_demuxer' : files('sdxdec.c','pcm.c'),
+  'securetransport' : files('tls_securetransport.c'),
   'segafilm_demuxer' : files('segafilm.c'),
   'segafilm_muxer' : files('segafilmenc.c'),
   'segment_muxer' : files('segment.c'),
diff --git a/meson.build b/meson.build
index 9a0b23e6d4..d9905d665f 100644
--- a/meson.build
+++ b/meson.build
@@ -1066,6 +1066,17 @@ check_funcs = [
   ['localtime_r'],
 ]
 
+if get_option('securetransport').allowed()
+  conf.set10('securetransport', false)
+  check_components += [
+    ['securetransport', ['Security/SecureTransport.h', 'Security/Security.h'], ['SSLCreateContext'], [], {'frameworks': ['CoreFoundation', 'Security']}],
+  ]
+  check_funcs += [
+    ['SecIdentityCreate', {'c_args': ['-Wl,-framework,CoreFoundation', '-Wl,-framework,Security']}],
+    ['SecItemImport', {'c_args': ['-Wl,-framework,CoreFoundation', '-Wl,-framework,Security']}],
+  ]
+endif
+
 check_types = [
   ['DXVA_PicParams_HEVC', ['windows.h', 'dxva.h'], {'c_args': ['-DWINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP', '-D_CRT_BUILD_DESKTOP_APP=0']}],
   ['DXVA_PicParams_VP9', ['windows.h', 'dxva.h'], {'c_args': ['-DWINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP', '-D_CRT_BUILD_DESKTOP_APP=0']}],
@@ -1990,6 +2001,17 @@ if conf.get('openssl') == 1
   endif
 endif
 
+schannel_extra_deps = []
+
+if conf.get('schannel') == 1
+  secur32_dep = cc.find_library('secur32', required: false)
+  if cc.links(cpp_cond.format('winerror.h', 'defined(SEC_I_CONTEXT_EXPIRED)'), dependencies: secur32_dep, name: 'schannel dependency works')
+    schannel_extra_deps += [secur32_dep]
+  else
+    conf.set('schannel', 0)
+  endif
+endif
+
 # Manual check for avisynth
 if conf.get('avisynth') == 1
   if not cc.links(cpp_cond.format('avisynth/avs/version.h', 'AVS_MAJOR_VER >= 3 && AVS_MINOR_VER >= 7 && AVS_BUGFIX_VER >= 1 || AVS_MAJOR_VER >= 3 && AVS_MINOR_VER > 7 || AVS_MAJOR_VER > 3'), name: 'avisynth version')
@@ -2515,6 +2537,8 @@ foreach program : program_list
   conf.set(program, get_option(program).allowed().to_int())
 endforeach
 
+conf.set10('network', get_option('network').allowed())
+
 result = run_command(find_things, '--full', files('libavfilter/allfilters.c'), check: true)
 full_filter_list = result.stdout().strip().split('\n')
 
@@ -2601,14 +2625,6 @@ subdir('fftools')
 
 util_list = ['cuda', 'd3d11va', 'dxva2', 'libdrm', 'lzo', 'mediacodec', 'opencl', 'qsv', 'vaapi', 'vdpau', 'videotoolbox']
 
-if conf.get('schannel') == 1
-  secur32_dep = cc.find_library('secur32')
-  if secur32_dep.found()
-    libavformat_optional_deps += [secur32_dep]
-  else
-    conf.set('schannel', 0)
-  endif
-endif
 
 things_to_print = [
   ['libavcodec/codec_list.c', 'FFCodec', 'codec_list', encoder_list + decoder_list],
diff --git a/meson_options.txt b/meson_options.txt
index d88b7e410d..4df9989b6c 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -119,6 +119,8 @@ option('openal', type: 'feature', value: 'disabled')
 option('opencl', type: 'feature', value: 'disabled')
 option('opengl', type: 'feature', value: 'disabled')
 option('psapi', type: 'feature', value: 'disabled')
+option('securetransport', type: 'feature', value: 'auto')
+option('schannel', type: 'feature', value: 'auto')
 option('shell32', type: 'feature', value: 'disabled')
 option('spirv_compiler', type: 'feature', value: 'disabled')
 option('pocketsphinx', type: 'feature', value: 'disabled')
@@ -2361,4 +2363,5 @@ option('inline_asm', type: 'feature', value: 'enabled', description: 'Enable inl
 # other options
 # cli is disabled by default to speed up the build since it links statically
 option('cli', type: 'feature', value: 'disabled')
+option('network', type: 'feature', value: 'auto', description: 'Enable network support')
 option('tests', type : 'feature', value : 'auto', description : 'Build tests', yield : true)
diff --git a/parse_sources.py b/parse_sources.py
index 3ba923da6d..017725b6c5 100644
--- a/parse_sources.py
+++ b/parse_sources.py
@@ -128,6 +128,10 @@ def make_to_meson(path):
                 label = ''
                 ofiles = l.split('=')[1]
                 source_type = 'shlib'
+            elif re.match('TLS-OBJS-.*CONFIG.*\+\=.*', l):
+                label, ofiles = l.split('+=')
+                label = label.split('CONFIG_')[1].rstrip(' )')
+                source_type = 'c' # arguable ^^
             elif re.match('MMX-OBJS-.*CONFIG.*\+\=.*', l):
                 label, ofiles = l.split('+=')
                 label = label.split('CONFIG_')[1].rstrip(' )')
-- 
GitLab


From 378f6d10eb19fb48ff7f40acff34c10bee2c726e Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Sat, 29 Jul 2023 18:24:39 +0000
Subject: [PATCH 09/28] meson: Implement Apple frameworks support

---
 .gitlab-ci.yml    |   3 ++
 meson.build       | 121 +++++++++++++++++++++++++++++++++++++++-------
 meson_options.txt |   8 +++
 3 files changed, 115 insertions(+), 17 deletions(-)

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index ffeae089fd..cd0a5e18c0 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -232,10 +232,13 @@ iOS arm64 cross:
       [properties]
       c_args =      ['-arch', 'arm64', '--sysroot=$(xcrun --sdk iphoneos --show-sdk-path)', '-miphoneos-version-min=11.0']
       c_link_args = ['-arch', 'arm64', '--sysroot=$(xcrun --sdk iphoneos --show-sdk-path)', '-miphoneos-version-min=11.0']
+      objc_args =      ['-arch', 'arm64', '--sysroot=$(xcrun --sdk iphoneos --show-sdk-path)', '-miphoneos-version-min=11.0']
+      objc_link_args = ['-arch', 'arm64', '--sysroot=$(xcrun --sdk iphoneos --show-sdk-path)', '-miphoneos-version-min=11.0']
 
       [binaries]
       ar        = '$(xcrun --find --sdk iphoneos ar)'
       c         = '$(xcrun --find --sdk iphoneos clang)'
+      objc         = '$(xcrun --find --sdk iphoneos clang)'
       cpp       = '$(xcrun --find --sdk iphoneos clang++)'
       ranlib    = '$(xcrun --find --sdk iphoneos ranlib)'
       strip     = '$(xcrun --find --sdk iphoneos strip)'
diff --git a/meson.build b/meson.build
index d9905d665f..95290c7d19 100644
--- a/meson.build
+++ b/meson.build
@@ -791,6 +791,32 @@ conf.set10('pic', conf.get('pic', cc.links(cpp_cond.format('stdlib.h', 'defined(
 
 conf.set10('winrt', cc.links(cpp_cond.format('windows.h', '!WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)')))
 
+check_framework = [
+  ['AppKit'],
+  ['AudioToolbox'],
+  ['AVFoundation'],
+  ['CoreImage'],
+  ['Metal'],
+  ['VideoToolbox'],
+]
+
+test_check_framework = [
+  'CoreFoundation',
+  'CoreMedia',
+  'CoreVideo',
+  'CoreAudio',
+]
+
+avfoundation_indev_extra_deps = dependency('appleframeworks', modules: 'Foundation', required: get_option('avfoundation_indev').enabled())
+audiotoolbox_outdev_extra_deps = dependency('appleframeworks', modules: ['AudioToolbox', 'CoreAudio'], required: get_option('audiotoolbox_outdev').enabled())
+coreimage_filter_extra_deps = dependency('appleframeworks', modules: 'OpenGL', required: get_option('coreimage_filter').enabled())
+coreimagesrc_filter_extra_deps = dependency('appleframeworks', modules: 'OpenGL', required: get_option('coreimage_filter').enabled())
+videotoolbox_extra_deps = dependency('appleframeworks', modules: 'QuartzCore', required: get_option('videotoolbox').enabled())
+
+foreach check : check_framework
+  all_checks += [['framework', check]]
+endforeach
+
 check_pkg_config = [
   ['alsa', ['alsa/asoundlib.h'], ['snd_pcm_htimestamp'], {}],
   ['chromaprint', ['chromaprint.h'], ['chromaprint_get_version'], {'pkg': 'chromaprint'}],
@@ -1002,6 +1028,24 @@ check_components = [
     {'preconditions': ['libm'], 'extra_deps': ['libm_extra_deps']}],
 ]
 
+if get_option('avfoundation').allowed()
+  conf.set10('coregraphics', false)
+  conf.set10('applicationservices', false)
+
+  check_components += [
+    ['coregraphics', ['CoreGraphics/CoreGraphics.h'], ['CGGetActiveDisplayList'], [], {'frameworks': ['CoreGraphics']}],
+    ['applicationservices', ['ApplicationServices/ApplicationServices.h'], ['CGGetActiveDisplayList'], [], {'frameworks': ['ApplicationServices']}]
+  ]
+endif
+
+if get_option('videotoolbox').allowed()
+  conf.set10('coreservices', false)
+
+  check_components += [
+    ['coreservices', ['CoreServices/CoreServices.h'], ['UTGetOSTypeFromString'], [], {'frameworks': ['CoreServices']}],
+  ]
+endif
+
 check_header_funcs = [
   ['aligned_malloc', ['malloc.h'], {'funcs': ['_aligned_malloc']}],
   ['arc4random', ['stdlib.h']],
@@ -1121,6 +1165,28 @@ check_types = [
   ['VdpPictureInfoAV1', ['vdpau/vdpau.h']],
 ]
 
+if get_option('videotoolbox').allowed()
+  check_types += [
+    ['kCMVideoCodecType_HEVC', ['CoreMedia/CMFormatDescription.h'], {'frameworks': ['CoreMedia']}],
+    ['kCMVideoCodecType_HEVCWithAlpha', ['CoreMedia/CMFormatDescription.h'], {'frameworks': ['CoreMedia']}],
+    ['kCMVideoCodecType_VP9', ['CoreMedia/CMFormatDescription.h'], {'frameworks': ['CoreMedia']}],
+    ['kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange', ['CoreVideo/CVPixelBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange', ['CoreVideo/CVPixelBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange', ['CoreVideo/CVPixelBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange', ['CoreVideo/CVPixelBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange', ['CoreVideo/CVPixelBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange', ['CoreVideo/CVPixelBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange', ['CoreVideo/CVPixelBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVImageBufferTransferFunction_SMPTE_ST_2084_PQ', ['CoreVideo/CVImageBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVImageBufferTransferFunction_ITU_R_2100_HLG', ['CoreVideo/CVImageBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVImageBufferTransferFunction_Linear', ['CoreVideo/CVImageBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVImageBufferYCbCrMatrix_ITU_R_2020', ['CoreVideo/CVImageBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVImageBufferColorPrimaries_ITU_R_2020', ['CoreVideo/CVImageBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVImageBufferTransferFunction_ITU_R_2020', ['CoreVideo/CVImageBuffer.h'], {'frameworks': ['CoreVideo']}],
+    ['kCVImageBufferTransferFunction_SMPTE_ST_428_1', ['CoreVideo/CVImageBuffer.h'], {'frameworks': ['CoreVideo']}],
+  ]
+endif
+
 if cc.has_header('arpa/inet.h')
   conf.set('arpa_inet_h', 1)
   check_funcs += [['closesocket']]
@@ -1462,21 +1528,6 @@ program_list = [
   'ffmpeg',
 ]
 
-apple_frameworks = [
-  'CoreFoundation',
-  'CoreMedia',
-  'CoreVideo',
-  'AppKit',
-  'AudioToolbox',
-  'AVFoundation',
-  'CoreImage',
-  'Metal',
-  'VideoToolbox',
-  'CoreGraphics',
-  'CoreServices',
-  'ApplicationServices',
-]
-
 avcodec_components = [
   'bsfs',
   'decoders',
@@ -1714,6 +1765,16 @@ if ['linux', 'openbsd', 'android'].contains(host_machine.system())
   conf.set('section_data_rel_ro', 1)
 endif
 
+foreach f : test_check_framework
+  name = f.underscorify().to_lower()
+  dep = dependency('appleframeworks', modules: f, required: false)
+  conf.set10(name, false)
+  if cc.has_header('@0@/@0@.h'.format(f), dependencies: dep)
+    conf.set10(name, true)
+    common_deps += [dep]
+  endif
+endforeach
+
 # Our option names can't be 1:1 mapping because newer meson versions disallow
 # options with language prefixes i.e. "cuda_sdk" in our case
 options_map = {
@@ -1732,12 +1793,15 @@ foreach check : all_checks
     headers = []
   elif check_type == 'header'
     headers = [name]
+  elif check_type == 'framework'
+    headers = ['@0@/@0@.h'.format(name)]
   else
     headers = check[1]
   endif
 
   opts = {}
   link_withs = []
+  frameworks = []
   funcs = []
   compiles = ''
   links = ''
@@ -1775,6 +1839,9 @@ foreach check : all_checks
       opts = check[2]
     endif
     type = name
+  elif check_type == 'framework'
+    opt_name = name.underscorify().to_lower()
+    frameworks = [name]
   endif
 
   if check_type == 'header-func' or check_type == 'func'
@@ -1786,6 +1853,9 @@ foreach check : all_checks
   if check_type != 'component'
     link_withs = opts.get('link_with', [])
   endif
+  if check_type != 'framework'
+    frameworks = opts.get('frameworks', [])
+  endif
 
   found = false
 
@@ -1796,7 +1866,7 @@ foreach check : all_checks
     extra_deps = []
 
     foreach dep_name : opts.get('extra_deps', [])
-      extra_deps += [get_variable(dep_name)]
+      extra_deps += [get_variable(dep_name, [])]
     endforeach
 
     prefix = ''
@@ -1833,7 +1903,14 @@ foreach check : all_checks
     endif
 
     if found
-      if check_type != 'pkg-config'
+      if check_type == 'framework'
+        foreach f : frameworks
+          req = get_option(opt_name)
+          dep = dependency('appleframeworks', modules : f, required: req)
+          found = found and dep.found()
+          extra_deps += dep
+        endforeach
+      elif check_type != 'pkg-config'
         foreach link_with : link_withs
           if check_type == 'component' and not ('always-check' in opts)
             req = get_option(opt_name)
@@ -1844,6 +1921,16 @@ foreach check : all_checks
           found = found and dep.found()
           extra_deps += dep
         endforeach
+        foreach f : frameworks
+          if check_type == 'component' and not ('always-check' in opts)
+            req = get_option(opt_name)
+          else
+            req = false
+          endif
+          dep = dependency('appleframeworks', modules : f, required: req)
+          found = found and dep.found()
+          extra_deps += dep
+        endforeach
       else
         req = get_option(opt_name)
         pkg_name = opts.get('pkg', name)
diff --git a/meson_options.txt b/meson_options.txt
index 4df9989b6c..ff7c4d2258 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -81,12 +81,19 @@ option('vapoursynth', type: 'feature', value: 'disabled')
 # library options
 option('advapi32', type: 'feature', value: 'auto')
 option('android', type: 'feature', value: 'auto')
+option('appkit', type: 'feature', value: 'auto')
+option('applicationservices', type: 'feature', value: 'auto')
+option('audiotoolbox', type: 'feature', value: 'auto')
+option('avfoundation', type: 'feature', value: 'auto')
 option('bcrypt', type: 'feature', value: 'auto')
 option('bzlib', type: 'feature', value: 'auto')
 option('camera2ndk', type: 'feature', value: 'auto')
 option('libcelt', type: 'feature', value: 'disabled')
 option('chromaprint', type: 'feature', value: 'disabled')
 option('clock_gettime', type: 'feature', value: 'auto')
+option('coreimage', type: 'feature', value: 'auto')
+option('coregraphics', type: 'feature', value: 'auto')
+option('coreservices', type: 'feature', value: 'auto')
 option('ff_cuda_sdk', type: 'feature', value: 'auto') # cuda_sdk in ffmpeg
 option('crystalhd', type: 'feature', value: 'auto')
 option('gcrypt', type: 'feature', value: 'disabled')
@@ -132,6 +139,7 @@ option('zlib', type: 'feature', value: 'auto')
 option('vaapi_drm', type: 'feature', value: 'disabled')
 option('vaapi_x11', type: 'feature', value: 'disabled')
 option('vdpau_x11', type: 'feature', value: 'disabled')
+option('videotoolbox', type: 'feature', value: 'auto')
 option('libmp3lame', type: 'feature', value: 'disabled')
 option('mediafoundation', type: 'feature', value: 'disabled')
 option('libmysofa', type: 'feature', value: 'disabled')
-- 
GitLab


From 573f2a4325167e86c2500e78076d385b95b2ca79 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Sat, 29 Jul 2023 18:24:39 +0000
Subject: [PATCH 10/28] meson: Implement DXVA2 support

---
 meson.build       | 22 ++++++++++++++++++++++
 meson_options.txt |  6 ++++--
 2 files changed, 26 insertions(+), 2 deletions(-)

diff --git a/meson.build b/meson.build
index 95290c7d19..f34039281c 100644
--- a/meson.build
+++ b/meson.build
@@ -791,6 +791,25 @@ conf.set10('pic', conf.get('pic', cc.links(cpp_cond.format('stdlib.h', 'defined(
 
 conf.set10('winrt', cc.links(cpp_cond.format('windows.h', '!WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)')))
 
+d3d11va_extra_deps = []
+
+conf.set10('uwp', cc.compiles('''#ifdef WINAPI_FAMILY
+#include <winapifamily.h>
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
+#error desktop, not uwp
+#else
+// WINAPI_FAMILY_APP, WINAPI_FAMILY_PHONE_APP => UWP
+#endif
+#else
+#error no family set
+#endif''', name: 'is UWP'))
+if conf.get('uwp') == 1
+  d3d11va_extra_deps += [
+    cc.find_library('dxgi'),
+    cc.find_library('d3d11')
+  ]
+endif
+
 check_framework = [
   ['AppKit'],
   ['AudioToolbox'],
@@ -1122,6 +1141,7 @@ if get_option('securetransport').allowed()
 endif
 
 check_types = [
+  ['DXVA_PicParams_AV1', ['windows.h', 'dxva.h'], {'c_args': ['-DWINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP', '-D_CRT_BUILD_DESKTOP_APP=0']}],
   ['DXVA_PicParams_HEVC', ['windows.h', 'dxva.h'], {'c_args': ['-DWINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP', '-D_CRT_BUILD_DESKTOP_APP=0']}],
   ['DXVA_PicParams_VP9', ['windows.h', 'dxva.h'], {'c_args': ['-DWINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP', '-D_CRT_BUILD_DESKTOP_APP=0']}],
   ['DXGI_OUTDUPL_FRAME_INFO', ['windows.h', 'dxgi1_2.h']],
@@ -1213,6 +1233,8 @@ check_headers = [
   ['direct.h'],
   ['dirent.h'],
   ['dxgidebug.h'],
+  ['dxva.h'],
+  ['dxva2api.h', {'c_args': ['-D_WIN32_WINNT=0x0600']}],
   ['msa.h'],
   ['net/udplite.h'],
   ['sys/param.h'],
diff --git a/meson_options.txt b/meson_options.txt
index ff7c4d2258..9786920c4b 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -96,6 +96,8 @@ option('coregraphics', type: 'feature', value: 'auto')
 option('coreservices', type: 'feature', value: 'auto')
 option('ff_cuda_sdk', type: 'feature', value: 'auto') # cuda_sdk in ffmpeg
 option('crystalhd', type: 'feature', value: 'auto')
+option('d3d11va', type: 'feature', value: 'auto')
+option('dxva2', type: 'feature', value: 'auto')
 option('gcrypt', type: 'feature', value: 'disabled')
 option('gmp', type: 'feature', value: 'disabled')
 option('libaribb24', type: 'feature', value: 'disabled')
@@ -121,7 +123,7 @@ option('lzma', type: 'feature', value: 'auto')
 option('mediandk', type: 'feature', value: 'disabled')
 option('mmal', type: 'feature', value: 'disabled')
 option('nanosleep', type: 'feature', value: 'auto')
-option('ole32', type: 'feature', value: 'disabled')
+option('ole32', type: 'feature', value: 'auto')
 option('openal', type: 'feature', value: 'disabled')
 option('opencl', type: 'feature', value: 'disabled')
 option('opengl', type: 'feature', value: 'disabled')
@@ -132,7 +134,7 @@ option('shell32', type: 'feature', value: 'disabled')
 option('spirv_compiler', type: 'feature', value: 'disabled')
 option('pocketsphinx', type: 'feature', value: 'disabled')
 option('sndio', type: 'feature', value: 'disabled')
-option('user32', type: 'feature', value: 'disabled')
+option('user32', type: 'feature', value: 'auto')
 option('vfw32', type: 'feature', value: 'disabled')
 option('vaapi', type: 'feature', value: 'disabled')
 option('zlib', type: 'feature', value: 'auto')
-- 
GitLab


From 228eca8a4f4dd36bded22ea987ef2a1f97bb2eda Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Sat, 29 Jul 2023 18:24:39 +0000
Subject: [PATCH 11/28] meson: Complete Media Foundation checks

---
 meson.build       | 3 ++-
 meson_options.txt | 2 +-
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/meson.build b/meson.build
index f34039281c..f081e7b783 100644
--- a/meson.build
+++ b/meson.build
@@ -1005,7 +1005,6 @@ check_components = [
   ['linux_fb_h', ['linux/fb.h'], [], []],
   ['lzma', ['lzma.h'], ['lzma_version_number'], ['lzma']],
   ['mbedtls', ['mbedtls/ssl.h'], ['mbedtls_ssl_init'], ['mbedtls', 'mbedx509', 'mbedcrypto']],
-  ['mediafoundation', ['mfapi.h'], ['MFCreateAlignedMemoryBuffer'], ['mfplat', 'mfuuid', 'ole32', 'strmiids'], {'defines': ['mftransform_h']}],
   ['mediandk', ['stdint.h', 'media/NdkImage.h'], ['AImage_delete'], ['mediandk']],
   ['mmal', ['interface/mmal/mmal.h'], ['mmal_port_connect'], ['mmal_core', 'mmal_util', 'mmal_vc_client', 'bcm_host']],
   ['nanosleep', ['time.h'], ['nanosleep'], ['rt']],
@@ -1086,6 +1085,7 @@ check_header_funcs = [
   ['Sleep', ['windows.h']],
   ['VirtualAlloc', ['windows.h']],
   ['glob', ['glob.h']],
+  ['MFCreateAlignedMemoryBuffer', ['mfapi.h'], {'link_with': ['mfplat', 'mfuuid', 'ole32', 'strmiids']}],
   ['CreateDIBSection', ['windows.h'], {'link_with': ['gdi32']}],
   ['InitializeSecurityContext', ['windows.h', 'security.h'], {'link_with': ['secur32'], 'c_args': ['-DSECURITY_WIN32']}],
   ['atomic_cas_ptr', ['atomic.h']],
@@ -1235,6 +1235,7 @@ check_headers = [
   ['dxgidebug.h'],
   ['dxva.h'],
   ['dxva2api.h', {'c_args': ['-D_WIN32_WINNT=0x0600']}],
+  ['mftransform.h'],
   ['msa.h'],
   ['net/udplite.h'],
   ['sys/param.h'],
diff --git a/meson_options.txt b/meson_options.txt
index 9786920c4b..d849617977 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -120,6 +120,7 @@ option('libvo_amrwbenc', type: 'feature', value: 'disabled')
 option('libxvid', type: 'feature', value: 'disabled')
 option('linux_fbdev', type: 'feature', value: 'disabled')
 option('lzma', type: 'feature', value: 'auto')
+option('mediafoundation', type: 'feature', value: 'auto')
 option('mediandk', type: 'feature', value: 'disabled')
 option('mmal', type: 'feature', value: 'disabled')
 option('nanosleep', type: 'feature', value: 'auto')
@@ -143,7 +144,6 @@ option('vaapi_x11', type: 'feature', value: 'disabled')
 option('vdpau_x11', type: 'feature', value: 'disabled')
 option('videotoolbox', type: 'feature', value: 'auto')
 option('libmp3lame', type: 'feature', value: 'disabled')
-option('mediafoundation', type: 'feature', value: 'disabled')
 option('libmysofa', type: 'feature', value: 'disabled')
 option('libxavs', type: 'feature', value: 'disabled')
 option('libxavs2', type: 'feature', value: 'disabled')
-- 
GitLab


From ea18c8e8ba81afd6da84cc4ed05c7bcde475d0e9 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Sat, 29 Jul 2023 18:24:39 +0000
Subject: [PATCH 12/28] meson: Complete Xlib checks

---
 meson.build       | 10 ++++++++++
 meson_options.txt |  1 +
 2 files changed, 11 insertions(+)

diff --git a/meson.build b/meson.build
index f081e7b783..b2a2e20398 100644
--- a/meson.build
+++ b/meson.build
@@ -1044,6 +1044,9 @@ check_components = [
     {'preconditions': ['libm'], 'extra_deps': ['libm_extra_deps']}],
   ['libxavs', ['stdint.h', 'xavs.h'], ['xavs_encoder_encode'], ['xavs'],
     {'preconditions': ['libm'], 'extra_deps': ['libm_extra_deps']}],
+  ['xlib_x11', ['X11/Xlib.h'], ['XPending'], ['X11']],
+  ['xlib_xext', ['X11/Xlib.h', 'X11/extensions/XShm.h'], ['XShmAttach'], ['Xext']],
+  ['xlib_xv', ['X11/Xlib.h', 'X11/extensions/Xvlib.h'], ['XvGetPortAttribute'], ['Xv']],
 ]
 
 if get_option('avfoundation').allowed()
@@ -2176,6 +2179,13 @@ if conf.get('libzvbi') == 1
     prefix: '#include <libzvbi.h>', dependencies: libzvbi_extra_deps))
 endif
 
+foreach req : ['xlib_x11', 'xlib_xext', 'xlib_xv']
+  if conf.get(req) == 0
+    conf.set10('xlib', false)
+    break
+  endif
+endforeach
+
 x86asm_type = 'none'
 
 x86asm_checks = []
diff --git a/meson_options.txt b/meson_options.txt
index d849617977..13f8ca9337 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -149,6 +149,7 @@ option('libxavs', type: 'feature', value: 'disabled')
 option('libxavs2', type: 'feature', value: 'disabled')
 option('omx', type: 'feature', value: 'disabled')
 option('vulkan', type: 'feature', value: 'disabled')
+option('xlib', type: 'feature', value: 'disabled')
 option('xlib_x11', type: 'feature', value: 'disabled')
 option('xlib_xext', type: 'feature', value: 'disabled')
 option('xlib_xv', type: 'feature', value: 'disabled')
-- 
GitLab


From 5776512921b4a5c7942fbd609b158876eb4477c3 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Sat, 29 Jul 2023 18:24:39 +0000
Subject: [PATCH 13/28] meson: Implement upstream 'programs' option and
 deprecate 'cli'

---
 meson.build       | 21 +++++++++++----------
 meson_options.txt |  3 ++-
 2 files changed, 13 insertions(+), 11 deletions(-)

diff --git a/meson.build b/meson.build
index b2a2e20398..18520d25d1 100644
--- a/meson.build
+++ b/meson.build
@@ -17,7 +17,7 @@
 # License along with this library; if not, see <http://www.gnu.org/licenses/>.
 
 project('FFmpeg', 'c',
-  meson_version: '>= 0.59',
+  meson_version: '>= 0.60',
   license: 'LGPL2.1+',
   default_options: [ 'buildtype=debugoptimized', 'c_std=c99', 'cpp_std=c++11'],
   version: '6.0.0',
@@ -25,7 +25,7 @@ project('FFmpeg', 'c',
 
 # HOWTO:
 #
-# Get meson >= 0.59 from pip or your distro's package manager then:
+# Get meson >= 0.60 from pip or your distro's package manager then:
 #
 # meson build && ninja -C build
 
@@ -2653,8 +2653,11 @@ foreach filter : filter_list
   endif
 endforeach
 
+old_cli = get_option('cli')
+new_programs = get_option('programs').disable_auto_if(old_cli.disabled())
+
 foreach program : program_list
-  conf.set(program, get_option(program).allowed().to_int())
+  conf.set10(program, new_programs.allowed() and get_option(program).allowed())
 endforeach
 
 conf.set10('network', get_option('network').allowed())
@@ -3158,13 +3161,11 @@ endforeach
 
 built_exe_list = []
 
-if not get_option('cli').disabled()
-  foreach program : program_list
-    if conf.get(program) == 1
-      built_exe_list += program
-    endif
-  endforeach
-endif
+foreach program : program_list
+  if conf.get(program) == 1
+    built_exe_list += program
+  endif
+endforeach
 
 foreach built_exe : built_exe_list
   sources = get_variable('fftools_sources', []) + [ffversion_h]
diff --git a/meson_options.txt b/meson_options.txt
index 13f8ca9337..dd42251964 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -2373,6 +2373,7 @@ option('inline_asm', type: 'feature', value: 'enabled', description: 'Enable inl
 
 # other options
 # cli is disabled by default to speed up the build since it links statically
-option('cli', type: 'feature', value: 'disabled')
+option('cli', type: 'feature', value: 'disabled', deprecated: true)
+option('programs', type: 'feature', value: 'auto', description: 'Build command line programs')
 option('network', type: 'feature', value: 'auto', description: 'Enable network support')
 option('tests', type : 'feature', value : 'auto', description : 'Build tests', yield : true)
-- 
GitLab


From 3a682b5598d9921394bd2efa201c8ba37746a015 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Sat, 29 Jul 2023 18:24:39 +0000
Subject: [PATCH 14/28] meson: Implement iconv support

---
 meson.build       | 5 ++++-
 meson_options.txt | 1 +
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/meson.build b/meson.build
index 18520d25d1..bd58f6b5f1 100644
--- a/meson.build
+++ b/meson.build
@@ -961,6 +961,7 @@ check_components = [
   # FFmpeg deprecated CrystalHD in 6.0
   # ['crystalhd', ['stdint.h', 'libcrystalhd/libcrystalhd_if.h'], ['DtsCrystalHDVersion'], ['crystalhd']],
   ['frei0r', ['frei0r.h'], [], []],
+  ['iconv', ['iconv.h'], ['iconv'], ['iconv']],
   ['libgme', ['gme/gme.h'], ['gme_new_emu'], ['gme', 'stdc++']],
   ['gcrypt', ['gcrypt.h'], ['gcry_mpi_new'], ['gcrypt']],
   ['gmp', ['gmp.h'], ['mpz_export'], ['gmp']],
@@ -1097,6 +1098,7 @@ check_header_funcs = [
   ['posix_memalign', ['stdlib.h']],
   ['sem_timedwait', ['semaphore.h'], {'preconditions': ['pthreads'], 'extra_deps': ['thread_dep']}],
   ['prctl', ['sys/prctl.h']],
+  ['iconv', ['iconv.h']],
 ]
 
 foreach func : math_funcs
@@ -2811,6 +2813,7 @@ endif
 
 add_project_arguments(project_c_args, language: 'c')
 
+libavcodec_optional_deps = [iconv_extra_deps]
 libavutil_optional_deps = [vaapi_drm_extra_deps + vaapi_x11_extra_deps + vdpau_x11_extra_deps]
 libswresample_optional_deps = [libsoxr_extra_deps]
 
@@ -3046,7 +3049,7 @@ foreach built_lib : built_libs
   link_with = []
 
   foreach dep : built_lib[1]
-    link_with += [get_variable(dep)]
+    deps += [get_variable('@0@_dep'.format(dep))]
   endforeach
 
   version = get_variable('lib@0@_majorver'.format(built_lib[0]))
diff --git a/meson_options.txt b/meson_options.txt
index dd42251964..aa1f4d09de 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -4,6 +4,7 @@ option('avisynth', type: 'feature', value: 'disabled')
 option('decklink', type: 'feature', value: 'disabled')
 option('ffnvcodec', type: 'feature', value: 'auto')
 option('frei0r', type: 'feature', value: 'disabled')
+option('iconv', type: 'feature', value: 'disabled')
 option('libgme', type: 'feature', value: 'disabled')
 option('gnutls', type: 'feature', value: 'disabled')
 option('libaom', type: 'feature', value: 'disabled')
-- 
GitLab


From fddfb61186d92dc2d31f0b60b16a34fbf235940a Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Sat, 29 Jul 2023 18:24:39 +0000
Subject: [PATCH 15/28] meson: Implement automatic library detection from
 upstream

Some options, like CUDA and LLVM, still need more support written in.
---
 meson.build       | 50 ++++++++++++++++++++++++++++++++++++++++-------
 meson_options.txt | 31 ++++++++++++++++++++---------
 2 files changed, 65 insertions(+), 16 deletions(-)

diff --git a/meson.build b/meson.build
index bd58f6b5f1..032851d4db 100644
--- a/meson.build
+++ b/meson.build
@@ -524,11 +524,17 @@ types_list = [
   'struct_v4l2_frmivalenum_discrete',
 ]
 
-conf.set('runtime_cpudetect', 1)
 asm = get_option('asm')
 inline_asm = get_option('inline_asm')
 
 conf.set10('asm', asm.allowed())
+conf.set10('faan', true)
+conf.set10('faandct', true)
+conf.set10('faanidct', true)
+conf.set10('optimizations', get_option('optimization') != '0')
+conf.set10('runtime_cpudetect', true)
+conf.set10('safe_bitstream_reader', true)
+conf.set10('swscale_alpha', true)
 
 if inline_asm.allowed()
   conf.set10('inline_asm',
@@ -1378,6 +1384,12 @@ hwaccel_autodetect_library_list = [
   'v4l2_m2m',
 ]
 
+autodetect_libs = (
+  external_autodetect_library_list + 
+  hwaccel_autodetect_library_list + 
+  threads_list
+)
+
 # catchall list of things that require external libs to link
 extralibs_list = [
   'cpu_init',
@@ -1660,10 +1672,6 @@ foreach lib : threads_list
   conf.set(lib, 0)
 endforeach
 
-foreach lib : hwaccel_autodetect_library_list
-  conf.set(lib, 0)
-endforeach
-
 foreach check_struct : check_structs
   conf_name = '@0@_@1@'.format(check_struct[0].underscorify(), check_struct[1].underscorify())
 
@@ -1772,7 +1780,7 @@ if conf.get('float16') == 1
     # https://developercommunity.visualstudio.com/t/AVX512F-does-not-allow-detecting-the-F16/10345004
     conf.set10('fast_float16', cc.links(cpp_cond.format('stddef.h', 'defined(__F16C__) || defined(__AVX2__)'), args: project_c_args))
   elif conf.get('arm') == 1 or conf.get('aarch64') == 1
-    conf.set10('fast_float16', 1)
+    conf.set10('fast_float16', true)
   endif
 endif
 
@@ -1806,10 +1814,19 @@ endforeach
 # Our option names can't be 1:1 mapping because newer meson versions disallow
 # options with language prefixes i.e. "cuda_sdk" in our case
 options_map = {
+  'cuda_llvm' : 'ff_cuda_llvm',
   'cuda_sdk' : 'ff_cuda_sdk',
   'linux_fb_h' : 'linux_fbdev',
 }
 
+# Mark specifically enabled, but normally autodetected libraries as requested.
+foreach component : autodetect_libs
+  opt_name = options_map.get(component, component)
+  if get_option(opt_name).enabled()
+    conf.set10(component, true)
+  endif
+endforeach
+
 foreach check : all_checks
   check_type = check[0]
   check = check[1]
@@ -1904,7 +1921,16 @@ foreach check : all_checks
     preconditions = opts.get('preconditions', [])
 
     foreach precondition : preconditions
-      found = found and conf.get(precondition) == 1
+      if precondition in autodetect_libs
+        opt_name = options_map.get(precondition, precondition)
+        if get_option(opt_name).allowed()
+          found = found and conf.get(precondition, 1) == 1
+        else
+          found = found and conf.get(precondition, 0) == 1
+        endif
+      else
+        found = found and conf.get(precondition) == 1
+      endif
     endforeach
 
     # FIXME: or should these just be preconditions in the list above instead?
@@ -2054,6 +2080,16 @@ foreach check : all_checks
   endif
 endforeach
 
+# MANUAL: Mathieu already treats all enables as enable_weak. But they can
+# only be enabled if the check is missing (ie. they're placeholders)
+# or they've already passed
+foreach component : external_autodetect_library_list + hwaccel_autodetect_library_list
+  opt_name = options_map.get(component, component)
+  if conf.get(component, 1) == 1
+    conf.set10(component, get_option(opt_name).allowed())
+  endif
+endforeach
+
 if conf.get('w32threads') == 0 and conf.get('pthreads') == 0
   conf.set10('w32threads', cc.has_function('_beginthreadex', prefix: '#include <process.h>')
     and cc.has_type('CONDITION_VARIABLE', prefix : '#include <windows.h>')
diff --git a/meson_options.txt b/meson_options.txt
index aa1f4d09de..a8461bc309 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -81,6 +81,7 @@ option('vapoursynth', type: 'feature', value: 'disabled')
 
 # library options
 option('advapi32', type: 'feature', value: 'auto')
+option('amf', type: 'feature', value: 'disabled')
 option('android', type: 'feature', value: 'auto')
 option('appkit', type: 'feature', value: 'auto')
 option('applicationservices', type: 'feature', value: 'auto')
@@ -89,19 +90,22 @@ option('avfoundation', type: 'feature', value: 'auto')
 option('bcrypt', type: 'feature', value: 'auto')
 option('bzlib', type: 'feature', value: 'auto')
 option('camera2ndk', type: 'feature', value: 'auto')
-option('libcelt', type: 'feature', value: 'disabled')
 option('chromaprint', type: 'feature', value: 'disabled')
 option('clock_gettime', type: 'feature', value: 'auto')
 option('coreimage', type: 'feature', value: 'auto')
 option('coregraphics', type: 'feature', value: 'auto')
 option('coreservices', type: 'feature', value: 'auto')
-option('ff_cuda_sdk', type: 'feature', value: 'auto') # cuda_sdk in ffmpeg
 option('crystalhd', type: 'feature', value: 'auto')
+option('cuda', type: 'feature', value: 'disabled')
+option('cuvid', type: 'feature', value: 'disabled')
+option('ff_cuda_llvm', type: 'feature', value: 'disabled') # ff_cuda_llvm in ffmpeg
+option('ff_cuda_sdk', type: 'feature', value: 'auto') # cuda_sdk in ffmpeg
 option('d3d11va', type: 'feature', value: 'auto')
 option('dxva2', type: 'feature', value: 'auto')
 option('gcrypt', type: 'feature', value: 'disabled')
 option('gmp', type: 'feature', value: 'disabled')
 option('libaribb24', type: 'feature', value: 'disabled')
+option('libcelt', type: 'feature', value: 'disabled')
 option('libcodec2', type: 'feature', value: 'disabled')
 option('libdav1d', type: 'feature', value: 'disabled')
 option('libdl', type: 'feature', value: 'auto')
@@ -109,6 +113,8 @@ option('libflite', type: 'feature', value: 'disabled')
 option('libgsm', type: 'feature', value: 'disabled')
 option('libiec61883', type: 'feature', value: 'disabled')
 option('libilbc', type: 'feature', value: 'disabled')
+option('libmp3lame', type: 'feature', value: 'disabled')
+option('libmysofa', type: 'feature', value: 'disabled')
 option('libnpp', type: 'feature', value: 'disabled')
 option('libopencore_amrnb', type: 'feature', value: 'disabled')
 option('libopencore_amrwb', type: 'feature', value: 'disabled')
@@ -118,42 +124,46 @@ option('libtheora', type: 'feature', value: 'disabled')
 option('libtwolame', type: 'feature', value: 'disabled')
 option('libuavs3d', type: 'feature', value: 'disabled')
 option('libvo_amrwbenc', type: 'feature', value: 'disabled')
+option('libxavs', type: 'feature', value: 'disabled')
+option('libxavs2', type: 'feature', value: 'disabled')
 option('libxvid', type: 'feature', value: 'disabled')
 option('linux_fbdev', type: 'feature', value: 'disabled')
 option('lzma', type: 'feature', value: 'auto')
 option('mediafoundation', type: 'feature', value: 'auto')
 option('mediandk', type: 'feature', value: 'disabled')
+option('metal', type: 'feature', value: 'disabled')
 option('mmal', type: 'feature', value: 'disabled')
+option('nvdec', type: 'feature', value: 'disabled')
+option('nvenc', type: 'feature', value: 'disabled')
 option('nanosleep', type: 'feature', value: 'auto')
 option('ole32', type: 'feature', value: 'auto')
+option('omx', type: 'feature', value: 'disabled')
+option('omx_rpi', type: 'feature', value: 'disabled')
 option('openal', type: 'feature', value: 'disabled')
 option('opencl', type: 'feature', value: 'disabled')
 option('opengl', type: 'feature', value: 'disabled')
+option('pocketsphinx', type: 'feature', value: 'disabled')
 option('psapi', type: 'feature', value: 'disabled')
 option('securetransport', type: 'feature', value: 'auto')
 option('schannel', type: 'feature', value: 'auto')
 option('shell32', type: 'feature', value: 'disabled')
 option('spirv_compiler', type: 'feature', value: 'disabled')
-option('pocketsphinx', type: 'feature', value: 'disabled')
 option('sndio', type: 'feature', value: 'disabled')
 option('user32', type: 'feature', value: 'auto')
 option('vfw32', type: 'feature', value: 'disabled')
+option('v4l2_m2m', type: 'feature', value: 'disabled')
 option('vaapi', type: 'feature', value: 'disabled')
-option('zlib', type: 'feature', value: 'auto')
 option('vaapi_drm', type: 'feature', value: 'disabled')
 option('vaapi_x11', type: 'feature', value: 'disabled')
+option('vdpau', type: 'feature', value: 'disabled')
 option('vdpau_x11', type: 'feature', value: 'disabled')
 option('videotoolbox', type: 'feature', value: 'auto')
-option('libmp3lame', type: 'feature', value: 'disabled')
-option('libmysofa', type: 'feature', value: 'disabled')
-option('libxavs', type: 'feature', value: 'disabled')
-option('libxavs2', type: 'feature', value: 'disabled')
-option('omx', type: 'feature', value: 'disabled')
 option('vulkan', type: 'feature', value: 'disabled')
 option('xlib', type: 'feature', value: 'disabled')
 option('xlib_x11', type: 'feature', value: 'disabled')
 option('xlib_xext', type: 'feature', value: 'disabled')
 option('xlib_xv', type: 'feature', value: 'disabled')
+option('zlib', type: 'feature', value: 'auto')
 
 #### --- GENERATED EXTERN OPTIONS --- ####
 # Generated muxer options
@@ -2377,4 +2387,7 @@ option('inline_asm', type: 'feature', value: 'enabled', description: 'Enable inl
 option('cli', type: 'feature', value: 'disabled', deprecated: true)
 option('programs', type: 'feature', value: 'auto', description: 'Build command line programs')
 option('network', type: 'feature', value: 'auto', description: 'Enable network support')
+option('pthreads', type: 'feature', value: 'auto', description: 'Enable pthreads')
+option('w32threads', type: 'feature', value: 'auto', description: 'Enable Win32 threads')
+option('os2threads', type: 'feature', value: 'disabled', description: 'Enable OS/2 support')
 option('tests', type : 'feature', value : 'auto', description : 'Build tests', yield : true)
-- 
GitLab


From b75c65a72fc1db3147992be0b9609ffdb9b3e534 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Sat, 29 Jul 2023 18:24:39 +0000
Subject: [PATCH 16/28] meson: Implement device autoselection option

---
 meson.build       | 9 +++++++++
 meson_options.txt | 1 +
 2 files changed, 10 insertions(+)

diff --git a/meson.build b/meson.build
index 032851d4db..c9c25caa44 100644
--- a/meson.build
+++ b/meson.build
@@ -2708,6 +2708,15 @@ avdevice_components_list = indev_list + outdev_list
 avfilter_components_list = filter_list
 avformat_components_list = demuxer_list + muxer_list + protocol_list
 
+if not get_option('devices').allowed()
+  foreach device : indev_list
+    conf.set10(device, false)
+  endforeach
+  foreach device : outdev_list
+    conf.set10(device, false)
+  endforeach
+endif
+
 all_components = avcodec_components_list + avdevice_components_list + avfilter_components_list + avformat_components_list
 
 tmpconfig_h = configure_file(configuration: conf, output: 'tmpconfig.h')
diff --git a/meson_options.txt b/meson_options.txt
index a8461bc309..20769716a9 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -2387,6 +2387,7 @@ option('inline_asm', type: 'feature', value: 'enabled', description: 'Enable inl
 option('cli', type: 'feature', value: 'disabled', deprecated: true)
 option('programs', type: 'feature', value: 'auto', description: 'Build command line programs')
 option('network', type: 'feature', value: 'auto', description: 'Enable network support')
+option('devices', type: 'feature', value: 'auto', description: 'Enable all input/output devices')
 option('pthreads', type: 'feature', value: 'auto', description: 'Enable pthreads')
 option('w32threads', type: 'feature', value: 'auto', description: 'Enable Win32 threads')
 option('os2threads', type: 'feature', value: 'disabled', description: 'Enable OS/2 support')
-- 
GitLab


From e575bd4359bcd462b36b339f5ef14de45b6ef98d Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Sun, 30 Jul 2023 20:29:30 +0000
Subject: [PATCH 17/28] meson: Implement Metal support

---
 ffbuild/bin2c.py           | 39 +++++++++++++++++++++++++++++++
 libavcodec/x86/meson.build |  2 +-
 libavfilter/meson.build    | 24 ++++++++++++++-----
 meson.build                | 48 ++++++++++++++++++++++++++++++++++++--
 parse_sources.py           | 12 +++++++---
 5 files changed, 113 insertions(+), 12 deletions(-)
 create mode 100644 ffbuild/bin2c.py

diff --git a/ffbuild/bin2c.py b/ffbuild/bin2c.py
new file mode 100644
index 0000000000..de2840090a
--- /dev/null
+++ b/ffbuild/bin2c.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+
+# SPDX-FileCopyrightText: 2023 L. E. Segovia <amy@centricular.com>
+# SPDX-License-Identifier: BSD-3-Clause
+
+from argparse import ArgumentParser
+from io import StringIO
+import os
+from pathlib import Path
+import re
+import shutil
+
+if __name__ == '__main__':
+    parser = ArgumentParser(description='Converts a blob into a C array')
+    parser.add_argument('input', type=Path)
+    parser.add_argument('output', type=Path)
+    parser.add_argument('name', nargs='?')
+
+    args = parser.parse_args()
+
+    input: Path = args.input
+    output: Path = args.output
+    name: str | None = args.name
+
+    if args.name is None:
+        name = re.sub(r'[^a-zA-Z0-9]', '_', output.stem)
+
+    tmp = StringIO()
+
+    with input.open('rb') as i:
+        length = os.path.getsize(input)
+        tmp.write(f"const unsigned char ff_{name}_data[] = {{")
+        while (byte := i.read(1)):
+            tmp.write(f"0x{int.from_bytes(byte):02x}, ")
+        print("0x00 };", file=tmp)
+        print(f"const unsigned int ff_{name}_len = {length};", file=tmp)
+
+    tmp.seek(0)
+    shutil.copyfileobj(tmp, output.open('w', encoding='utf-8'), -1)
diff --git a/libavcodec/x86/meson.build b/libavcodec/x86/meson.build
index 7e792ac34e..bc07efeb4c 100644
--- a/libavcodec/x86/meson.build
+++ b/libavcodec/x86/meson.build
@@ -112,7 +112,7 @@ libavcodec_x86_x86asm_optional_sources = {
   'hpeldsp' : files('fpel.asm','hpeldsp.asm'),
   'huffyuvdsp' : files('huffyuvdsp.asm'),
   'huffyuvencdsp' : files('huffyuvencdsp.asm'),
-  'idctdsp' : files('idctdsp.asm','simple_idct10.asm'),
+  'idctdsp' : files('idctdsp.asm','simple_idct10.asm'), # MANUAL
   'jpeg2000_decoder' : files('jpeg2000dsp.asm'),
   'llauddsp' : files('lossless_audiodsp.asm'),
   'llviddsp' : files('lossless_videodsp.asm'),
diff --git a/libavfilter/meson.build b/libavfilter/meson.build
index 2ea0683372..11f30eb0e1 100644
--- a/libavfilter/meson.build
+++ b/libavfilter/meson.build
@@ -189,7 +189,7 @@ libavfilter_optional_sources = {
   'colorlevels_filter' : files('vf_colorlevels.c'),
   'colormap_filter' : files('vf_colormap.c'),
   'colormatrix_filter' : files('vf_colormatrix.c'),
-  # 'colorspace_cuda_filter' : files('vf_colorspace_cuda.c','load_helper.c'),
+  # 'colorspace_cuda_filter' : files('vf_colorspace_cuda.c','cuda/load_helper.c'),
   'colorspace_filter' : files('vf_colorspace.c','colorspacedsp.c'),
   'colorspectrum_filter' : files('vsrc_testsrc.c'),
   'colortemperature_filter' : files('vf_colortemperature.c'),
@@ -392,7 +392,7 @@ libavfilter_optional_sources = {
   'ocv_filter' : files('vf_libopencv.c'),
   'openclsrc_filter' : files('vf_program_opencl.c','opencl.c'),
   'oscilloscope_filter' : files('vf_datascope.c'),
-  # 'overlay_cuda_filter' : files('vf_overlay_cuda.c','framesync.c','load_helper.c'),
+  # 'overlay_cuda_filter' : files('vf_overlay_cuda.c','framesync.c','cuda/load_helper.c'),
   'overlay_filter' : files('vf_overlay.c','framesync.c'),
   'overlay_opencl_filter' : files('vf_overlay_opencl.c','opencl.c','opencl/overlay.cl','framesync.c'),
   'overlay_qsv_filter' : files('vf_overlay_qsv.c','framesync.c'),
@@ -445,7 +445,7 @@ libavfilter_optional_sources = {
   'sab_filter' : files('vf_sab.c'),
   'scale2ref_filter' : files('vf_scale.c','scale_eval.c'),
   'scale2ref_npp_filter' : files('vf_scale_npp.c','scale_eval.c'),
-  # 'scale_cuda_filter' : files('vf_scale_cuda.c','scale_eval.c','load_helper.c'),
+  # 'scale_cuda_filter' : files('vf_scale_cuda.c','scale_eval.c'),
   'scale_filter' : files('vf_scale.c','scale_eval.c'),
   'scale_npp_filter' : files('vf_scale_npp.c','scale_eval.c'),
   'scale_qsv_filter' : files('vf_vpp_qsv.c'),
@@ -525,7 +525,7 @@ libavfilter_optional_sources = {
   'thistogram_filter' : files('vf_histogram.c'),
   'threads' : files('pthread.c'),
   'threshold_filter' : files('vf_threshold.c','framesync.c'),
-  # 'thumbnail_cuda_filter' : files('vf_thumbnail_cuda.c','load_helper.c'),
+  # 'thumbnail_cuda_filter' : files('vf_thumbnail_cuda.c','cuda/load_helper.c'),
   'thumbnail_filter' : files('vf_thumbnail.c'),
   'tile_filter' : files('vf_tile.c'),
   'tinterlace_filter' : files('vf_tinterlace.c'),
@@ -582,9 +582,9 @@ libavfilter_optional_sources = {
   'xstack_filter' : files('vf_stack.c','framesync.c'),
   'xstack_qsv_filter' : files('vf_stack_qsv.c','framesync.c'),
   'xstack_vaapi_filter' : files('vf_stack_vaapi.c','framesync.c','vaapi_vpp.c'),
-  # 'yadif_cuda_filter' : files('vf_yadif_cuda.c','yadif_common.c','load_helper.c'),
+  # 'yadif_cuda_filter' : files('vf_yadif_cuda.c','yadif_common.c','cuda/load_helper.c'),
   'yadif_filter' : files('vf_yadif.c','yadif_common.c'),
-  # 'yadif_videotoolbox_filter' : files('vf_yadif_videotoolbox.m','utils.m','yadif_common.c'),
+  'yadif_videotoolbox_filter' : files('vf_yadif_videotoolbox.m','metal/utils.m','yadif_common.c'), # MANUAL
   'yaepblur_filter' : files('vf_yaepblur.c'),
   'yuvtestsrc_filter' : files('vsrc_testsrc.c'),
   'zmq_filter' : files('f_zmq.c'),
@@ -655,6 +655,18 @@ dnn_sources = libavfilter_optional_sources.get('dnn') + libavfilter_dnn_optional
 
 libavfilter_optional_sources += {'dnn': dnn_sources}
 
+if conf.get('yadif_videotoolbox_filter') == 1
+  gen_objects = []
+  x = metalcc.process(
+        files('metal/vf_yadif_videotoolbox.metal',)
+      )
+  y = metallib.process(x)
+  gen_objects += bin2c.process(y)
+  libavfilter_optional_sources += {
+    'yadif_videotoolbox_filter' : libavfilter_optional_sources['yadif_videotoolbox_filter'] + gen_objects,
+  }
+endif
+
 # Version file
 ver_conf = configuration_data()
 ver_conf.set('majorver', libavfilter_majorver)
diff --git a/meson.build b/meson.build
index c9c25caa44..1685a77e61 100644
--- a/meson.build
+++ b/meson.build
@@ -19,7 +19,8 @@
 project('FFmpeg', 'c',
   meson_version: '>= 0.60',
   license: 'LGPL2.1+',
-  default_options: [ 'buildtype=debugoptimized', 'c_std=c99', 'cpp_std=c++11'],
+  # C11 is needed for Metal support
+  default_options: [ 'buildtype=debugoptimized', 'c_std=c11', 'cpp_std=c++11'],
   version: '6.0.0',
 )
 
@@ -121,7 +122,7 @@ project_c_args = [
 # Work around meson subprojects ignoring default_options
 # https://github.com/mesonbuild/meson/issues/1889#issuecomment-1275991958
 if meson.is_subproject() and meson.version().version_compare('< 0.63')
-  project_c_args += ['-std=c99']
+  project_c_args += ['-std=c11']
 endif
 
 project_c_args = cc.get_supported_arguments(project_c_args)
@@ -2090,6 +2091,49 @@ foreach component : external_autodetect_library_list + hwaccel_autodetect_librar
   endif
 endforeach
 
+xcrun = disabler()
+bin2c = disabler()
+metalcc = disabler()
+metallib = disabler()
+
+if conf.get('metal') == 1
+  appleclang_sdk = ''
+  # determine the subsystem
+  is_macos = cc.get_define('TARGET_OS_OSX', prefix: '#include <TargetConditionals.h>')
+  is_ios = cc.get_define('TARGET_OS_IOS', prefix: '#include <TargetConditionals.h>')
+  is_tvos = cc.get_define('TARGET_OS_TV', prefix: '#include <TargetConditionals.h>')
+  if is_ios == '1'
+    appleclang_sdk = 'iphoneos'
+  elif is_tvos == '1'
+    appleclang_sdk = 'tvos'
+  elif is_macos
+    appleclang_sdk = 'macos'
+  else
+    warning('Unable to detect target OS SDK for Metal, assuming macOS')
+    appleclang_sdk = 'macos'
+  endif
+
+  xcrun = find_program('xcrun', required: true)
+
+  if run_command(xcrun, '-sdk', appleclang_sdk, 'metal', '-v', check: false).returncode() == 0
+    metalcc = generator(xcrun, 
+      output : '@BASENAME@.metalair',
+      arguments: ['-sdk', 'macosx', 'metal', '@INPUT@', '-o', '@OUTPUT@']
+    )
+    metallib = generator(xcrun,
+      output : '@BASENAME@.metallib',
+      arguments: ['-sdk', 'macosx', 'metallib', '--split-module-without-linking', '@INPUT@', '-o', '@OUTPUT@']
+    )
+    bin2c_exe = find_program('ffbuild/bin2c.py', required: get_option('metal'))
+    bin2c = generator(bin2c_exe,
+      output : '@BASENAME@.metallib.c',
+      arguments: ['@INPUT@', '@OUTPUT@']
+    )
+  else
+    conf.set10('metal', false)
+  endif
+endif
+
 if conf.get('w32threads') == 0 and conf.get('pthreads') == 0
   conf.set10('w32threads', cc.has_function('_beginthreadex', prefix: '#include <process.h>')
     and cc.has_type('CONDITION_VARIABLE', prefix : '#include <windows.h>')
diff --git a/parse_sources.py b/parse_sources.py
index 017725b6c5..9971b26205 100644
--- a/parse_sources.py
+++ b/parse_sources.py
@@ -38,11 +38,14 @@ SOURCE_TYPE_EXTS_MAP = {
     'shlib': ['c'],
     'slib': ['c'],
 }
+SOURCE_TYPE_DOUBLE_EXTS_MAP = {
+    'metallib.o': ['metal']
+}
 SOURCE_TYPE_DIRS = {'test-prog': 'tests'}
 
 
-def add_source(f, source, prefix='', suffix=''):
-    if not source.startswith('opencl/'):
+def add_source(f, source: str, prefix='', suffix=''):
+    if not source.startswith(('opencl/', 'metal/', 'cuda/')):
         source = os.path.basename(source)
     f.write("%s'%s'%s" % (prefix, source, suffix))
 
@@ -229,7 +232,10 @@ def make_to_meson(path):
             exts = SOURCE_TYPE_EXTS_MAP[source_type]
             ifiles = []
             for ofile in ofiles:
-                fname = os.path.splitext(ofile)[0]
+                basename = ofile.split('.')
+                if len(basename) > 2:
+                    exts = SOURCE_TYPE_DOUBLE_EXTS_MAP.get('.'.join(basename[1:]), [])
+                fname = basename[0]
                 for ext in exts:
                     tmpf = fname + '.' + ext
                     if os.path.exists(os.path.join(path, SOURCE_TYPE_DIRS.get(source_type, ''), tmpf)):
-- 
GitLab


From 78f808eeebf43335c44a28f6a1c46623eeb851aa Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Tue, 1 Aug 2023 16:57:12 -0300
Subject: [PATCH 18/28] meson: Implement H.264 mediacodec decoder

---
 meson.build       | 10 ++++++++--
 meson_options.txt |  3 +++
 2 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/meson.build b/meson.build
index 1685a77e61..be454c72a2 100644
--- a/meson.build
+++ b/meson.build
@@ -1264,7 +1264,7 @@ check_headers = [
 
 if host_machine.system() == 'darwin'
   check_headers += [['dispatch/dispatch.h']]
-elif host_machine.system() == 'android'
+elif host_machine.system() == 'android' and get_option('jni').allowed()
   check_headers += [['jni.h']]
 endif
 
@@ -2168,6 +2168,12 @@ if conf.get('pthreads') == 0 and conf.get('w32threads') == 0 and conf.get('os2th
   endif
 endif
 
+if host_machine.system() == 'android' and get_option('jni').allowed()
+  if conf.get('jni_h') == 1 and not (conf.get('pthreads') == 1)
+    error('jni not found')
+  endif
+endif
+
 if conf.get('gnutls') == 1 and conf.get('openssl') == 1
   error('GnuTLS and OpenSSL must not be enabled at the same time.')
 endif
@@ -2902,7 +2908,7 @@ endif
 
 add_project_arguments(project_c_args, language: 'c')
 
-libavcodec_optional_deps = [iconv_extra_deps]
+libavcodec_optional_deps = [iconv_extra_deps + android_extra_deps]
 libavutil_optional_deps = [vaapi_drm_extra_deps + vaapi_x11_extra_deps + vdpau_x11_extra_deps]
 libswresample_optional_deps = [libsoxr_extra_deps]
 
diff --git a/meson_options.txt b/meson_options.txt
index 20769716a9..682c774c46 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -104,6 +104,7 @@ option('d3d11va', type: 'feature', value: 'auto')
 option('dxva2', type: 'feature', value: 'auto')
 option('gcrypt', type: 'feature', value: 'disabled')
 option('gmp', type: 'feature', value: 'disabled')
+option('jni', type : 'feature', value : 'auto')
 option('libaribb24', type: 'feature', value: 'disabled')
 option('libcelt', type: 'feature', value: 'disabled')
 option('libcodec2', type: 'feature', value: 'disabled')
@@ -129,6 +130,7 @@ option('libxavs2', type: 'feature', value: 'disabled')
 option('libxvid', type: 'feature', value: 'disabled')
 option('linux_fbdev', type: 'feature', value: 'disabled')
 option('lzma', type: 'feature', value: 'auto')
+option('mediacodec', type : 'feature', value : 'auto')
 option('mediafoundation', type: 'feature', value: 'auto')
 option('mediandk', type: 'feature', value: 'disabled')
 option('metal', type: 'feature', value: 'disabled')
@@ -2392,3 +2394,4 @@ option('pthreads', type: 'feature', value: 'auto', description: 'Enable pthreads
 option('w32threads', type: 'feature', value: 'auto', description: 'Enable Win32 threads')
 option('os2threads', type: 'feature', value: 'disabled', description: 'Enable OS/2 support')
 option('tests', type : 'feature', value : 'auto', description : 'Build tests', yield : true)
+option('large_tests', type : 'feature', value : 'disabled')
-- 
GitLab


From 48c9cb1f670288b2748d96f8d56e1d77fc5230f8 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Tue, 1 Aug 2023 21:57:20 -0300
Subject: [PATCH 19/28] meson: Fix Android x86 build

---
 meson.build | 56 +++++++++++++++++++++++++++++++++++++++++------------
 1 file changed, 44 insertions(+), 12 deletions(-)

diff --git a/meson.build b/meson.build
index be454c72a2..15054cdc43 100644
--- a/meson.build
+++ b/meson.build
@@ -104,7 +104,6 @@ project_c_args = [
   '-D_ISOC99_SOURCE',
   '-D_GNU_SOURCE',
   '-D_LARGEFILE_SOURCE',
-  '-DPIC',
   '-Wno-parentheses',
   '-Wno-pointer-sign',
   '-Wno-switch',
@@ -2299,6 +2298,11 @@ endif
 
 x86asm = disabler()
 conf.set('x86asm', 0)
+asm_args = ['-DPIC']
+
+if conf.get('pic') == 1
+  project_c_args += ['-DPIC']
+endif
 
 if conf.get('x86') == 1
   # Manual: check for binutils enforcing value ranges
@@ -2404,6 +2408,16 @@ if conf.get('x86') == 1
     endif
     conf.set10('x86asm', x86asm.found())
     if x86asm.found()
+      if cc.get_linker_id().contains('lld') and cpu == 'x86' and not ['windows', 'cygwin'].contains(host_machine.system()) 
+          # x86inc.asm ignores the PIC flag when compiling for x86 which unfortunately
+          # causes text relocations in the object files generated by the assembler. We
+          # must disable the warning to allow linking with lld. Unlike gold, ld which
+          # will silently allow text relocations, lld support must be explicit.
+          #
+          # See https://crbug.com/911658#c19 for more information. Tracked upstream at
+          # https://trac.ffmpeg.org/ticket/7878
+          add_project_link_arguments('-Wl,-z,notext', language: 'c')
+      endif
       x86asm_checks += [
         ['CPU amdnop', 'cpunop'],
         ['vmovdqa32 [eax]{k1}{z}, zmm0', 'avx512_external'],
@@ -2421,13 +2435,32 @@ if conf.get('x86') == 1
     endif
   endif
 
-  ebp_available = cc.run('''
-  int main() {
-    volatile int i=0;
-    __asm__ volatile ("xorl %%ebp, %%ebp" ::: "%ebp");
-    return i;
-  }
-  ''', name: 'if_ebp_available_this_should_crash')
+  ebp_available = false
+  ebp_available_test = '''#include <signal.h>
+    static void sighandler(int sig){
+        raise(SIGTERM);
+    }
+    int foo(void){
+        volatile int i=0;
+        __asm__ volatile ("xorl %%ebp, %%ebp" ::: "%ebp");
+        return i;
+    }
+    int (*func_ptr)(void) = foo;
+    int main(void){
+        signal(SIGILL, sighandler);
+        signal(SIGFPE, sighandler);
+        signal(SIGSEGV, sighandler);
+    #ifdef SIGBUS
+        signal(SIGBUS, sighandler);
+    #endif
+        return func_ptr();
+    }
+  '''
+  if meson.is_cross_build()
+    ebp_available = cc.links(ebp_available_test, name: 'if_ebp_available_this_should_crash')
+  else
+    ebp_available = cc.run(ebp_available_test, name: 'if_ebp_available_this_should_crash').returncode() != 0
+  endif
 
   # FFmpeg upstream doesn't know that EBP is always unavailable
   # under Clang if stack realignment is used. This is probably
@@ -2437,7 +2470,7 @@ if conf.get('x86') == 1
   # See:
   # - https://github.com/android/ndk/issues/693
   # - https://bugs.llvm.org/show_bug.cgi?id=37542
-  conf.set10('ebp_available', conf.get('aligned_stack') == 1 and ebp_available.compiled() and ebp_available.returncode() != 0)
+  conf.set10('ebp_available', conf.get('aligned_stack') == 1 and ebp_available)
 
   asm_inline_checks += [
     ['""::"b"(0)', 'ebx_available_1'],
@@ -2470,9 +2503,9 @@ elif conf.get('arm') == 1
   if conf.get('thumb', 0) == 1
     if cc.has_argument('-mthumb')
       project_c_args += ['-mthumb']
-    elif cc.has_argument('-marm')
-      project_c_args += ['-marm']
     endif
+  elif cc.has_argument('-marm')
+    project_c_args += ['-marm']
   endif
 
   if cc.has_header_symbol('stddef.h', '__ARM_PCS_VFP')
@@ -2521,7 +2554,6 @@ elif conf.get('arm') == 1
   endif
 endif
 
-asm_args = ['-DPIC']
 # Add debug args explicitly
 # yasm: `-g <format>`
 # nasm: ` -g -F <format>`
-- 
GitLab


From ab89366648fc9138b4f78ac0fe04785412b87425 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Tue, 1 Aug 2023 22:47:55 -0300
Subject: [PATCH 20/28] meson: Fix Windows x86 cross build

---
 libavcodec/x86/meson.build | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/libavcodec/x86/meson.build b/libavcodec/x86/meson.build
index bc07efeb4c..4dc7daa800 100644
--- a/libavcodec/x86/meson.build
+++ b/libavcodec/x86/meson.build
@@ -112,7 +112,7 @@ libavcodec_x86_x86asm_optional_sources = {
   'hpeldsp' : files('fpel.asm','hpeldsp.asm'),
   'huffyuvdsp' : files('huffyuvdsp.asm'),
   'huffyuvencdsp' : files('huffyuvencdsp.asm'),
-  'idctdsp' : files('idctdsp.asm','simple_idct10.asm'), # MANUAL
+  'idctdsp' : files('idctdsp.asm'), # MANUAL
   'jpeg2000_decoder' : files('jpeg2000dsp.asm'),
   'llauddsp' : files('lossless_audiodsp.asm'),
   'llviddsp' : files('lossless_videodsp.asm'),
@@ -193,5 +193,10 @@ if conf.get('x86_32', 0) == 1
   libavcodec_x86_x86asm_optional_sources += {
     'idctdsp': libavcodec_x86_x86asm_optional_sources ['idctdsp'] + files('simple_idct.asm')
   }
+elif conf.get('x86_64', 0) == 1
+  # Alternatively,
+  # panic: ../libavcodec/x86/simple_idct10.asm: assertion cv8_state.source_files != NULL failed at output/codeview.c:512
+  libavcodec_x86_x86asm_optional_sources += {
+    'idctdsp': libavcodec_x86_x86asm_optional_sources ['idctdsp'] + files('simple_idct10.asm')
+  }
 endif
-
-- 
GitLab


From c317069dbd40fe7aebb492c3fd99eee249206e9f Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Tue, 1 Aug 2023 23:18:49 -0300
Subject: [PATCH 21/28] meson: Fix another hidden dependency in the tests

---
 libavfilter/meson.build | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/libavfilter/meson.build b/libavfilter/meson.build
index 11f30eb0e1..a1fc7f633b 100644
--- a/libavfilter/meson.build
+++ b/libavfilter/meson.build
@@ -627,7 +627,7 @@ libavfilter_tests = [
   ['drawutils', files('tests/drawutils.c')],
   # MANUAL ['filtfmts', files('tests/filtfmts.c')],
   ['formats', files('tests/formats.c')],
-  ['integral', files('tests/integral.c')],
+  # MANUAL ['integral', files('tests/integral.c')],
 ]
 
 libavfilter_optional_tests = {
@@ -641,6 +641,9 @@ libavfilter_optional_tests = {
     ['dnn-layer-maximum', files('tests/dnn-layer-maximum.c')],
     ['dnn-layer-pad', files('tests/dnn-layer-pad.c')],
   ],
+  'nlmeans_filter': [
+    ['integral', files('tests/integral.c')],
+  ]
 }
 
 languages_map += {
-- 
GitLab


From fb75e04001dc4a1869c3ad6fe599959781133330 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Tue, 1 Aug 2023 23:23:18 -0300
Subject: [PATCH 22/28] meson: Fix more instances of empty Nasm files

---
 libavcodec/x86/meson.build | 17 +++++++++++------
 1 file changed, 11 insertions(+), 6 deletions(-)

diff --git a/libavcodec/x86/meson.build b/libavcodec/x86/meson.build
index 4dc7daa800..992c115594 100644
--- a/libavcodec/x86/meson.build
+++ b/libavcodec/x86/meson.build
@@ -93,7 +93,7 @@ libavcodec_x86_x86asm_optional_sources = {
   'bswapdsp' : files('bswapdsp.asm'),
   'cavs_decoder' : files('cavsidct.asm'),
   'cfhd_decoder' : files('cfhddsp.asm'),
-  'cfhd_encoder' : files('cfhdencdsp.asm'),
+  'cfhd_encoder' : [], # MANUAL
   'dca_decoder' : files('dcadsp.asm','synth_filter.asm'),
   'dct' : files('dct32.asm'),
   'dirac_decoder' : files('diracdsp.asm','dirac_dwt.asm'),
@@ -120,7 +120,7 @@ libavcodec_x86_x86asm_optional_sources = {
   'lpc' : files('lpc.asm'),
   'lscr_decoder' : files('pngdsp.asm'),
   'me_cmp' : files('me_cmp.asm'),
-  'mlp_decoder' : files('mlpdsp.asm'),
+  'mlp_decoder' : [], # MANUAL 
   'mpeg4_decoder' : files('xvididct.asm'),
   'mpegaudiodsp' : files('imdct36.asm'),
   'mpegvideoenc' : files('mpegvideoencdsp.asm'),
@@ -128,15 +128,15 @@ libavcodec_x86_x86asm_optional_sources = {
   'opus_encoder' : files('celt_pvq_search.asm'),
   'pixblockdsp' : files('pixblockdsp.asm'),
   'png_decoder' : files('pngdsp.asm'),
-  'prores_decoder' : files('proresdsp.asm'),
-  'prores_lgpl_decoder' : files('proresdsp.asm'),
+  'prores_decoder' : [], # MANUAL
+  'prores_lgpl_decoder' : [], # MANUAL
   'qpeldsp' : files('qpeldsp.asm','fpel.asm','qpel.asm'),
   'rv34dsp' : files('rv34dsp.asm'),
   'rv40_decoder' : files('rv40dsp.asm'),
   'sbc_encoder' : files('sbcdsp.asm'),
   'svq1_encoder' : files('svq1enc.asm'),
   'tak_decoder' : files('takdsp.asm'),
-  'truehd_decoder' : files('mlpdsp.asm'),
+  'truehd_decoder' : [], # MANUAL
   'tta_decoder' : files('ttadsp.asm'),
   'tta_encoder' : files('ttaencdsp.asm'),
   'utvideo_decoder' : files('utvideodsp.asm'),
@@ -197,6 +197,11 @@ elif conf.get('x86_64', 0) == 1
   # Alternatively,
   # panic: ../libavcodec/x86/simple_idct10.asm: assertion cv8_state.source_files != NULL failed at output/codeview.c:512
   libavcodec_x86_x86asm_optional_sources += {
-    'idctdsp': libavcodec_x86_x86asm_optional_sources ['idctdsp'] + files('simple_idct10.asm')
+    'idctdsp': libavcodec_x86_x86asm_optional_sources ['idctdsp'] + files('simple_idct10.asm'),
+    'mlp_decoder': libavcodec_x86_x86asm_optional_sources ['mlp_decoder'] + files('mlpdsp.asm'),
+    'cfhd_encoder': libavcodec_x86_x86asm_optional_sources ['cfhd_encoder'] + files('cfhdencdsp.asm'),
+    'prores_decoder': libavcodec_x86_x86asm_optional_sources ['prores_decoder'] + files('proresdsp.asm'),
+    'prores_lgpl_decoder': libavcodec_x86_x86asm_optional_sources ['prores_lgpl_decoder'] + files('proresdsp.asm'),
+    'truehd_decoder': libavcodec_x86_x86asm_optional_sources ['truehd_decoder'] + files('mlpdsp.asm'),
   }
 endif
-- 
GitLab


From faa9758f70a1e5bacea166238af20d93543676ab Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Wed, 2 Aug 2023 00:06:10 -0300
Subject: [PATCH 23/28] meson: Fix building TLS objects while tls_protocol is
 disabled

---
 meson.build | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/meson.build b/meson.build
index 15054cdc43..cf31f3a63d 100644
--- a/meson.build
+++ b/meson.build
@@ -2173,6 +2173,17 @@ if host_machine.system() == 'android' and get_option('jni').allowed()
   endif
 endif
 
+# FIXME: the source parser needs a case for the TLS-OBJS
+are_protocols_disabled = get_option('protocols').disabled()
+if get_option('tls_protocol').disable_auto_if(are_protocols_disabled).disabled()
+  conf.set10('gnutls', false)
+  conf.set10('openssl', false)
+  conf.set10('schannel', false)
+  conf.set10('securetransport', false)
+  conf.set10('libtls', false)
+  conf.set10('mbedtls', false)
+endif
+
 if conf.get('gnutls') == 1 and conf.get('openssl') == 1
   error('GnuTLS and OpenSSL must not be enabled at the same time.')
 endif
-- 
GitLab


From 0ee6ccaac162dc29a32a689cab9be3a2c0ba33d4 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Wed, 2 Aug 2023 09:37:25 -0300
Subject: [PATCH 24/28] meson: Fix missing handling of Meson >= 1.2.0 Arm ASM
 checks

---
 meson.build | 19 ++++++++++++-------
 1 file changed, 12 insertions(+), 7 deletions(-)

diff --git a/meson.build b/meson.build
index cf31f3a63d..aa9acf92aa 100644
--- a/meson.build
+++ b/meson.build
@@ -2680,12 +2680,14 @@ if (conf.get('arm', 0) == 1 or conf.get('aarch64', 0) == 1) and cc.get_id() != '
   ]
 endif
 
+can_run_asm_checks = false
+
 foreach check : asm_as_checks
   # It is possible to run compile checks on generated files, however,
   # Meson versions earlier than 1.2.0 do not set the lookup path
   # correctly, causing Python to fail opening it.
   # https://github.com/mesonbuild/meson/issues/11983
-  if conf.get('asm') == 1 and meson.version().version_compare('>= 1.2.0')
+  if can_run_asm_checks
     f = configure_file(
       command: [python3, '-c', 'import sys; print(sys.argv[1])', '@0@'.format(check[0])],
       input: 'configure',
@@ -2711,13 +2713,16 @@ endif
 
 arm_skip_checks = conf.get('arm', 0) == 1 and (host_machine.system() == 'linux' or host_machine.system() == 'android')
 
-foreach ext : arch_ext_list_arm
-  inline = '@0@_inline'.format(ext)
-  external = '@0@_external'.format(ext)
-  if not arm_skip_checks
+# If the ASM checks couldn't be run, we need to update the state
+# of ALL Arm instruction sets
+# That's apart from the upstream's linux/android check
+if not arm_skip_checks or not can_run_asm_checks
+  foreach ext : arch_ext_list_arm
+    inline = '@0@_inline'.format(ext)
+    external = '@0@_external'.format(ext)
     conf.set10(ext, conf.get(inline, 0) == 1 or conf.get(external, 0) == 1)
-  endif
-endforeach
+  endforeach
+endif
 
 if get_option('b_lto')
   conf.set10('inline_asm_direct_symbol_refs', false)
-- 
GitLab


From 9a57150bbb7fb27a08f5cd06732a0baa2f79afa9 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Wed, 2 Aug 2023 10:36:04 -0300
Subject: [PATCH 25/28] meson: Fix missing headers in the FFmpeg installation

---
 libavcodec/meson.build    |  53 +++++------
 libavdevice/meson.build   |  12 +--
 libavfilter/meson.build   |  16 ++--
 libavformat/meson.build   |  14 +--
 libavutil/meson.build     | 179 ++++++++++++++++++++------------------
 libpostproc/meson.build   |  10 ++-
 libswresample/meson.build |  10 ++-
 libswscale/meson.build    |  11 +--
 parse_sources.py          |  20 ++++-
 9 files changed, 178 insertions(+), 147 deletions(-)

diff --git a/libavcodec/meson.build b/libavcodec/meson.build
index e2e2f9ddf9..f47061a494 100644
--- a/libavcodec/meson.build
+++ b/libavcodec/meson.build
@@ -1,28 +1,3 @@
-libavcodec_headers = files(
-  'ac3_parser.h',
-  'adts_parser.h',
-  'avcodec.h',
-  'avdct.h',
-  'avfft.h',
-  'bsf.h',
-  'codec_desc.h',
-  'codec.h',
-  'codec_id.h',
-  'codec_par.h',
-  'd3d11va.h',
-  'dirac.h',
-  'dv_profile.h',
-  'dxva2.h',
-  'jni.h',
-  'mediacodec.h',
-  'packet.h',
-  'qsv.h',
-  'vdpau.h',
-  'videotoolbox.h',
-  'vorbis_parser.h',
-  'xvmc.h',
-)
-
 #### --- GENERATED --- ####
 
 libavcodec_sources = files(
@@ -62,6 +37,34 @@ libavcodec_sources = files(
   'dctref.c',
 )
 
+libavcodec_headers = files(
+  'ac3_parser.h',
+  'adts_parser.h',
+  'avcodec.h',
+  'avdct.h',
+  'avfft.h',
+  'bsf.h',
+  'codec.h',
+  'codec_desc.h',
+  'codec_id.h',
+  'codec_par.h',
+  'd3d11va.h',
+  'defs.h',
+  'dirac.h',
+  'dv_profile.h',
+  'dxva2.h',
+  'jni.h',
+  'mediacodec.h',
+  'packet.h',
+  'qsv.h',
+  'vdpau.h',
+  'version.h',
+  'version_major.h',
+  'videotoolbox.h',
+  'vorbis_parser.h',
+  'xvmc.h',
+)
+
 libavcodec_optional_sources = {
   'a64multi5_encoder' : files('a64multienc.c','elbg.c'),
   'a64multi_encoder' : files('a64multienc.c','elbg.c'),
diff --git a/libavdevice/meson.build b/libavdevice/meson.build
index 3a67100738..e50ccf331d 100644
--- a/libavdevice/meson.build
+++ b/libavdevice/meson.build
@@ -6,12 +6,6 @@ microver = cc.get_define('LIBAVDEVICE_VERSION_MICRO', kwargs: kwargs)
 
 libavdevice_version = f'@libavdevice_majorver@.@minorver@.@microver@'
 
-cc = meson.get_compiler('c')
-
-libavdevice_headers = files(
-  'avdevice.h',
-)
-
 #### --- GENERATED --- ####
 
 libavdevice_sources = files(
@@ -21,6 +15,12 @@ libavdevice_sources = files(
   'version.c',
 )
 
+libavdevice_headers = files(
+  'avdevice.h',
+  'version.h',
+  'version_major.h',
+)
+
 libavdevice_optional_sources = {
   'alsa_indev' : files('alsa_dec.c','alsa.c','timefilter.c'),
   'alsa_outdev' : files('alsa_enc.c','alsa.c'),
diff --git a/libavfilter/meson.build b/libavfilter/meson.build
index a1fc7f633b..3c87b00368 100644
--- a/libavfilter/meson.build
+++ b/libavfilter/meson.build
@@ -6,14 +6,6 @@ microver = cc.get_define('LIBAVFILTER_VERSION_MICRO', kwargs: kwargs)
 
 libavfilter_version = f'@libavfilter_majorver@.@minorver@.@microver@'
 
-cc = meson.get_compiler('c')
-
-libavfilter_headers = files(
-  'avfilter.h',
-  'buffersink.h',
-  'buffersrc.h',
-)
-
 #### --- GENERATED --- ####
 
 libavfilter_sources = files(
@@ -35,6 +27,14 @@ libavfilter_sources = files(
   'video.c',
 )
 
+libavfilter_headers = files(
+  'avfilter.h',
+  'buffersink.h',
+  'buffersrc.h',
+  'version.h',
+  'version_major.h',
+)
+
 libavfilter_optional_sources = {
   'a3dscope_filter' : files('avf_a3dscope.c'),
   'abench_filter' : files('f_bench.c'),
diff --git a/libavformat/meson.build b/libavformat/meson.build
index 07fff0a4c6..0335c5ba09 100644
--- a/libavformat/meson.build
+++ b/libavformat/meson.build
@@ -6,13 +6,6 @@ microver = cc.get_define('LIBAVFORMAT_VERSION_MICRO', kwargs: kwargs)
 
 libavformat_version = f'@libavformat_majorver@.@minorver@.@microver@'
 
-cc = meson.get_compiler('c')
-
-libavformat_headers = files(
-  'avformat.h',
-  'avio.h',
-)
-
 #### --- GENERATED --- ####
 
 libavformat_sources = files(
@@ -42,6 +35,13 @@ libavformat_sources = files(
   'version.c',
 )
 
+libavformat_headers = files(
+  'avformat.h',
+  'avio.h',
+  'version.h',
+  'version_major.h',
+)
+
 libavformat_optional_sources = {
   'a64_muxer' : files('a64.c','rawenc.c'),
   'aac_demuxer' : files('aacdec.c','apetag.c','img2.c','rawdec.c'),
diff --git a/libavutil/meson.build b/libavutil/meson.build
index bad03a3852..7a7595d487 100644
--- a/libavutil/meson.build
+++ b/libavutil/meson.build
@@ -1,89 +1,3 @@
-libavutil_headers = files(
-  'adler32.h',
-  'aes.h',
-  'aes_ctr.h',
-  'attributes.h',
-  'audio_fifo.h',
-  'avassert.h',
-  'avstring.h',
-  'avutil.h',
-  'base64.h',
-  'blowfish.h',
-  'bprint.h',
-  'bswap.h',
-  'buffer.h',
-  'camellia.h',
-  'cast5.h',
-  'channel_layout.h',
-  'common.h',
-  'cpu.h',
-  'crc.h',
-  'des.h',
-  'dict.h',
-  'display.h',
-  'dovi_meta.h',
-  'downmix_info.h',
-  'encryption_info.h',
-  'error.h',
-  'eval.h',
-  'fifo.h',
-  'file.h',
-  'frame.h',
-  'hash.h',
-  'hdr_dynamic_metadata.h',
-  'hmac.h',
-  'hwcontext.h',
-  'hwcontext_cuda.h',
-  'hwcontext_d3d11va.h',
-  'hwcontext_drm.h',
-  'hwcontext_dxva2.h',
-  'hwcontext_mediacodec.h',
-  'hwcontext_opencl.h',
-  'hwcontext_qsv.h',
-  'hwcontext_vaapi.h',
-  'hwcontext_vdpau.h',
-  'hwcontext_videotoolbox.h',
-  'hwcontext_vulkan.h',
-  'imgutils.h',
-  'intfloat.h',
-  'intreadwrite.h',
-  'lfg.h',
-  'log.h',
-  'lzo.h',
-  'macros.h',
-  'mastering_display_metadata.h',
-  'mathematics.h',
-  'md5.h',
-  'mem.h',
-  'motion_vector.h',
-  'murmur3.h',
-  'opt.h',
-  'parseutils.h',
-  'pixdesc.h',
-  'pixelutils.h',
-  'pixfmt.h',
-  'random_seed.h',
-  'rational.h',
-  'rc4.h',
-  'replaygain.h',
-  'ripemd.h',
-  'samplefmt.h',
-  'sha.h',
-  'sha512.h',
-  'spherical.h',
-  'stereo3d.h',
-  'tea.h',
-  'threadmessage.h',
-  'time.h',
-  'timecode.h',
-  'timestamp.h',
-  'tree.h',
-  'twofish.h',
-  'tx.h',
-  'video_enc_params.h',
-  'xtea.h',
-)
-
 #### --- GENERATED --- ####
 
 libavutil_sources = files(
@@ -171,6 +85,99 @@ libavutil_sources = files(
   'film_grain_params.c',
 )
 
+libavutil_headers = files(
+  'adler32.h',
+  'aes.h',
+  'aes_ctr.h',
+  'ambient_viewing_environment.h',
+  'attributes.h',
+  'audio_fifo.h',
+  'avassert.h',
+  'avstring.h',
+  'avutil.h',
+  'base64.h',
+  'blowfish.h',
+  'bprint.h',
+  'bswap.h',
+  'buffer.h',
+  'cast5.h',
+  'camellia.h',
+  'channel_layout.h',
+  'common.h',
+  'cpu.h',
+  'crc.h',
+  'csp.h',
+  'des.h',
+  'detection_bbox.h',
+  'dict.h',
+  'display.h',
+  'dovi_meta.h',
+  'downmix_info.h',
+  'encryption_info.h',
+  'error.h',
+  'eval.h',
+  'fifo.h',
+  'file.h',
+  'frame.h',
+  'hash.h',
+  'hdr_dynamic_metadata.h',
+  'hdr_dynamic_vivid_metadata.h',
+  'hmac.h',
+  'hwcontext.h',
+  'hwcontext_cuda.h',
+  'hwcontext_d3d11va.h',
+  'hwcontext_drm.h',
+  'hwcontext_dxva2.h',
+  'hwcontext_qsv.h',
+  'hwcontext_mediacodec.h',
+  'hwcontext_opencl.h',
+  'hwcontext_vaapi.h',
+  'hwcontext_videotoolbox.h',
+  'hwcontext_vdpau.h',
+  'hwcontext_vulkan.h',
+  'imgutils.h',
+  'intfloat.h',
+  'intreadwrite.h',
+  'lfg.h',
+  'log.h',
+  'lzo.h',
+  'macros.h',
+  'mathematics.h',
+  'mastering_display_metadata.h',
+  'md5.h',
+  'mem.h',
+  'motion_vector.h',
+  'murmur3.h',
+  'opt.h',
+  'parseutils.h',
+  'pixdesc.h',
+  'pixelutils.h',
+  'pixfmt.h',
+  'random_seed.h',
+  'rc4.h',
+  'rational.h',
+  'replaygain.h',
+  'ripemd.h',
+  'samplefmt.h',
+  'sha.h',
+  'sha512.h',
+  'spherical.h',
+  'stereo3d.h',
+  'threadmessage.h',
+  'time.h',
+  'timecode.h',
+  'timestamp.h',
+  'tree.h',
+  'twofish.h',
+  'uuid.h',
+  'version.h',
+  'video_enc_params.h',
+  'xtea.h',
+  'tea.h',
+  'tx.h',
+  'film_grain_params.h',
+)
+
 libavutil_optional_sources = {
   'cuda' : files('hwcontext_cuda.c'),
   'd3d11va' : files('hwcontext_d3d11va.c'),
diff --git a/libpostproc/meson.build b/libpostproc/meson.build
index 558c1eae23..633e9f76df 100644
--- a/libpostproc/meson.build
+++ b/libpostproc/meson.build
@@ -6,10 +6,6 @@ microver = cc.get_define('LIBPOSTPROC_VERSION_MICRO', kwargs: kwargs)
 
 libpostproc_version = f'@libpostproc_majorver@.@minorver@.@microver@'
 
-libpostproc_headers = files(
-  'postprocess.h',
-)
-
 #### --- GENERATED --- ####
 
 libpostproc_sources = files(
@@ -17,6 +13,12 @@ libpostproc_sources = files(
   'version.c',
 )
 
+libpostproc_headers = files(
+  'postprocess.h',
+  'version.h',
+  'version_major.h',
+)
+
 libpostproc_optional_sources = {
 }
 
diff --git a/libswresample/meson.build b/libswresample/meson.build
index a9d607632b..9415557357 100644
--- a/libswresample/meson.build
+++ b/libswresample/meson.build
@@ -6,10 +6,6 @@ microver = cc.get_define('LIBSWRESAMPLE_VERSION_MICRO', kwargs: kwargs)
 
 libswresample_version = f'@libswresample_majorver@.@minorver@.@microver@'
 
-libswresample_headers = files(
-  'swresample.h',
-)
-
 #### --- GENERATED --- ####
 
 libswresample_sources = files(
@@ -24,6 +20,12 @@ libswresample_sources = files(
   'version.c',
 )
 
+libswresample_headers = files(
+  'swresample.h',
+  'version.h',
+  'version_major.h',
+)
+
 libswresample_optional_sources = {
   'libsoxr' : files('soxr_resample.c'),
 }
diff --git a/libswscale/meson.build b/libswscale/meson.build
index 4b5550bc8c..732e695efc 100644
--- a/libswscale/meson.build
+++ b/libswscale/meson.build
@@ -6,11 +6,6 @@ microver = cc.get_define('LIBSWSCALE_VERSION_MICRO', kwargs: kwargs)
 
 libswscale_version = f'@libswscale_majorver@.@minorver@.@microver@'
 
-libswscale_headers = files(
-  'swscale.h',
-)
-
-
 #### --- GENERATED --- ####
 
 libswscale_sources = files(
@@ -32,6 +27,12 @@ libswscale_sources = files(
   'vscale.c',
 )
 
+libswscale_headers = files(
+  'swscale.h',
+  'version.h',
+  'version_major.h',
+)
+
 libswscale_optional_sources = {
 }
 
diff --git a/parse_sources.py b/parse_sources.py
index 9971b26205..858140fe15 100644
--- a/parse_sources.py
+++ b/parse_sources.py
@@ -27,6 +27,7 @@ ASM_EXTS = ['asm', 'S', 'c']
 
 SOURCE_TYPE_EXTS_MAP = {
     'c': ['c', 'cpp', 'm', 'cl', 'S'],
+    'h': ['h'],
     'asm': ASM_EXTS,
     'armv5te': ASM_EXTS,
     'armv6': ASM_EXTS,
@@ -103,6 +104,10 @@ def make_to_meson(path):
                 label, ofiles = l.split('+=')
                 label = label.split('CONFIG_')[1].rstrip(' )')
                 source_type = 'c'  # arguable too ^^
+            elif re.match('HEADERS.*=.*', l):
+                label = 'headers'
+                ofiles = l.split('=')[1]
+                source_type = 'h'
             elif re.match('OBJS.*=.*', l):
                 label = ''
                 ofiles = l.split('=')[1]
@@ -254,13 +259,13 @@ def make_to_meson(path):
             if accumulate:
                 accum += ifiles
             else:
-                map_ = source_maps[source_type]
+                map_ = source_maps.get(source_type, source_maps['c'])
                 map_[label] += accum + ifiles
                 accum = []
 
         # Makefiles can end with '\' and this is just a porting script ;)
         if accum:
-            map_ = source_maps[source_type]
+            map_ = source_maps.get(source_type, source_maps['c'])
             map_[label] += accum
             accum = []
 
@@ -305,6 +310,17 @@ def make_to_meson(path):
                 add_source(f, source, prefix='  ', suffix=',\n')
             f.write(')\n\n')
 
+        default_sources = map_.pop('headers', [])
+
+        if default_sources:
+            f.write('%sheaders = files(\n' % '_'.join((path.replace('/', '_'), source_type)))
+            for source in default_sources:
+                if '$' in source:
+                    print ('Warning: skipping %s' % source)
+                    continue
+                add_source(f, source, prefix='  ', suffix=',\n')
+            f.write(')\n\n')
+
         f.write('%soptional_sources = {\n' % '_'.join((path.replace('/', '_'), source_type)))
         for label in sorted (map_):
             if label in skipped:
-- 
GitLab


From 76b417b1e900da5d1384f9540112e347225e74b7 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Wed, 2 Aug 2023 13:59:46 -0300
Subject: [PATCH 26/28] meson: Fix detection of PIC disabled compilers

---
 meson.build | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/meson.build b/meson.build
index aa9acf92aa..24d2d70548 100644
--- a/meson.build
+++ b/meson.build
@@ -793,7 +793,9 @@ if libc_type != ''
   conf.set('libc_@0@'.format(libc_type), 1)
 endif
 
-conf.set10('pic', conf.get('pic', cc.links(cpp_cond.format('stdlib.h', 'defined(__PIC__) || defined(__pic__) || defined(PIC)'))))
+# PIC is Meson managed, the compiler may not support it by
+# default but can be enabled through b_staticpic
+conf.set10('pic', get_option('b_staticpic'))
 
 conf.set10('winrt', cc.links(cpp_cond.format('windows.h', '!WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)')))
 
@@ -2309,10 +2311,11 @@ endif
 
 x86asm = disabler()
 conf.set('x86asm', 0)
-asm_args = ['-DPIC']
+asm_args = []
 
 if conf.get('pic') == 1
   project_c_args += ['-DPIC']
+  asm_args += ['-DPIC']
 endif
 
 if conf.get('x86') == 1
@@ -3242,6 +3245,7 @@ foreach built_lib : built_libs
     link_with: link_with,
     link_args: static_link_args,
     c_args: c_args,
+    pic: conf.get('pic') == 1,
     implicit_include_directories : false,
   )
 
@@ -3259,6 +3263,7 @@ foreach built_lib : built_libs
     link_whole: static_lib,
     link_args: link_args,
     c_args: c_args,
+    pic: conf.get('pic') == 1,
     vs_module_defs: vs_module_def,
     implicit_include_directories : false,
     install: true,
@@ -3296,7 +3301,9 @@ foreach built_lib : built_libs
         include_directories: common_incs,
         link_args: static_link_args,
         link_with: [static_lib] + link_with,
-        implicit_include_directories : false)
+        implicit_include_directories : false,
+        pie: get_option('b_pie') and (conf.get('pic') == 1)
+      )
 
       test('@0@_@1@'.format(built_lib[0], test_name), exe,
         timeout: 180,
@@ -3343,6 +3350,7 @@ foreach built_exe : built_exe_list
     include_directories: common_incs,
     link_with: [libavutil, libavcodec, libavfilter, libavdevice, libavformat, libswscale, libswresample, libpostproc],
     implicit_include_directories : false,
+    pie: get_option('b_pie') and (conf.get('pic') == 1)
   )
 
   set_variable('@0@_exe'.format(built_exe[0]), exe)
-- 
GitLab


From 03291e907643e3ca6ddbaabab1468713aa5e3040 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Wed, 2 Aug 2023 19:13:21 -0300
Subject: [PATCH 27/28] meson: Fix asm disabling the entire build due to a
 variable leak

This partially reverts commit 51165aa5765da2ee43cc807eb9bf0685d011bca1.
---
 meson.build | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/meson.build b/meson.build
index 24d2d70548..729ca23f81 100644
--- a/meson.build
+++ b/meson.build
@@ -2309,7 +2309,6 @@ else
   asm_format = conf.get('x86_64') == 1 ? 'elf64' : 'elf32'
 endif
 
-x86asm = disabler()
 conf.set('x86asm', 0)
 asm_args = []
 
@@ -2402,9 +2401,9 @@ if conf.get('x86') == 1
 
   # Manual: the configure script never checks if x86asm is enabled outside
   # of an x86 context. So I fix those semantics here.
-  conf.set10('x86asm', get_option('x86asm').allowed())
+  conf.set10('x86asm', get_option('asm').allowed() and (conf.get('mmx', 1) == 1) and get_option('x86asm').allowed())
 
-  if (conf.get('asm', 1) == 1) and (conf.get('mmx', 1) == 1) and (conf.get('x86asm', 1) == 1)
+  if conf.get('x86asm') == 1
     conf.set('x86asm', 0)
     nasm_version = '>=0'
     if host_machine.system() == 'windows'
-- 
GitLab


From 36eb6a3f87a1e3e69b3c813f03275562b5ffd81d Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Wed, 2 Aug 2023 20:20:59 -0300
Subject: [PATCH 28/28] meson: Integrate Android API checks for disabling
 assembly

---
 meson.build | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/meson.build b/meson.build
index 729ca23f81..192083d182 100644
--- a/meson.build
+++ b/meson.build
@@ -2318,6 +2318,16 @@ if conf.get('pic') == 1
 endif
 
 if conf.get('x86') == 1
+  is_broken_android_api = cc.links(cpp_cond.format('android/api-level.h', '__ANDROID_API__ < 24'), name: 'compiling for Android API <24')
+
+  if is_broken_android_api and conf.get('x86_64') == 0
+    # https://stackoverflow.com/questions/34691970/ffmpeg-for-android-neon-build-has-text-relocations/34697703#34697703
+    # https://issuetracker.google.com/issues/37067983
+    # https://trac.ffmpeg.org/ticket/4928
+    warning('Disabling inline assembly due to Google banning non-position independent assembly code.')
+    conf.set10('inline_asm', false)
+  endif
+
   # Manual: check for binutils enforcing value ranges
   # https://sourceware.org/bugzilla/show_bug.cgi?id=30578
   # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108941
@@ -2483,6 +2493,15 @@ if conf.get('x86') == 1
   # See:
   # - https://github.com/android/ndk/issues/693
   # - https://bugs.llvm.org/show_bug.cgi?id=37542
+  if is_broken_android_api and conf.get('x86_64') == 0
+    warning('''x86 targets prior to Android Nougat (API 24) need
+      -mstackrealign to properly align stack for global constructors.
+      See https://github.com/android-ndk/ndk/issues/635''')
+    project_c_args += ['-mstackrealign']
+
+    # Zero in EBP because the preamble now consumes an additional register.
+    ebp_available = false
+  endif
   conf.set10('ebp_available', conf.get('aligned_stack') == 1 and ebp_available)
 
   asm_inline_checks += [
-- 
GitLab

